{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3e22824e",
   "metadata": {
    "papermill": {
     "duration": 0.01315,
     "end_time": "2024-10-15T09:54:09.581098",
     "exception": false,
     "start_time": "2024-10-15T09:54:09.567948",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### <a href=\"https://www.kaggle.com/code/pietrocaforio/unimodal-ct-training-kaggle?scriptVersionId=197281783\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6767eaa2",
   "metadata": {
    "papermill": {
     "duration": 0.011705,
     "end_time": "2024-10-15T09:54:09.605928",
     "exception": false,
     "start_time": "2024-10-15T09:54:09.594223",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Train 3D unimodal CT"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9f7f5c6e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-15T09:54:09.631192Z",
     "iopub.status.busy": "2024-10-15T09:54:09.630823Z",
     "iopub.status.idle": "2024-10-15T09:54:12.702056Z",
     "shell.execute_reply": "2024-10-15T09:54:12.700780Z"
    },
    "papermill": {
     "duration": 3.086827,
     "end_time": "2024-10-15T09:54:12.704707",
     "exception": false,
     "start_time": "2024-10-15T09:54:09.617880",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cloning into 'research-biocv-proj'...\r\n",
      "remote: Enumerating objects: 501, done.\u001b[K\r\n",
      "remote: Counting objects: 100% (46/46), done.\u001b[K\r\n",
      "remote: Compressing objects: 100% (39/39), done.\u001b[K\r\n",
      "remote: Total 501 (delta 24), reused 20 (delta 7), pack-reused 455 (from 1)\u001b[K\r\n",
      "Receiving objects: 100% (501/501), 4.03 MiB | 25.35 MiB/s, done.\r\n",
      "Resolving deltas: 100% (304/304), done.\r\n",
      "Branch 'dev' set up to track remote branch 'dev' from 'origin'.\r\n",
      "Switched to a new branch 'dev'\r\n"
     ]
    }
   ],
   "source": [
    "!git clone https://github.com/PietroCaforio/research-biocv-proj\n",
    "!cd research-biocv-proj && git switch dev"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "da37eb13",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-15T09:54:12.733782Z",
     "iopub.status.busy": "2024-10-15T09:54:12.733425Z",
     "iopub.status.idle": "2024-10-15T09:54:14.103533Z",
     "shell.execute_reply": "2024-10-15T09:54:14.102441Z"
    },
    "papermill": {
     "duration": 1.387132,
     "end_time": "2024-10-15T09:54:14.105973",
     "exception": false,
     "start_time": "2024-10-15T09:54:12.718841",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Already up to date.\r\n"
     ]
    }
   ],
   "source": [
    "!cd research-biocv-proj && git pull"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8e6fcf32",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-15T09:54:14.133961Z",
     "iopub.status.busy": "2024-10-15T09:54:14.133573Z",
     "iopub.status.idle": "2024-10-15T09:54:26.787168Z",
     "shell.execute_reply": "2024-10-15T09:54:26.785989Z"
    },
    "papermill": {
     "duration": 12.670328,
     "end_time": "2024-10-15T09:54:26.789554",
     "exception": false,
     "start_time": "2024-10-15T09:54:14.119226",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: wandb in /opt/conda/lib/python3.10/site-packages (0.18.3)\r\n",
      "Requirement already satisfied: click!=8.0.0,>=7.1 in /opt/conda/lib/python3.10/site-packages (from wandb) (8.1.7)\r\n",
      "Requirement already satisfied: docker-pycreds>=0.4.0 in /opt/conda/lib/python3.10/site-packages (from wandb) (0.4.0)\r\n",
      "Requirement already satisfied: gitpython!=3.1.29,>=1.0.0 in /opt/conda/lib/python3.10/site-packages (from wandb) (3.1.43)\r\n",
      "Requirement already satisfied: platformdirs in /opt/conda/lib/python3.10/site-packages (from wandb) (3.11.0)\r\n",
      "Requirement already satisfied: protobuf!=4.21.0,!=5.28.0,<6,>=3.19.0 in /opt/conda/lib/python3.10/site-packages (from wandb) (3.20.3)\r\n",
      "Requirement already satisfied: psutil>=5.0.0 in /opt/conda/lib/python3.10/site-packages (from wandb) (5.9.3)\r\n",
      "Requirement already satisfied: pyyaml in /opt/conda/lib/python3.10/site-packages (from wandb) (6.0.2)\r\n",
      "Requirement already satisfied: requests<3,>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from wandb) (2.32.3)\r\n",
      "Requirement already satisfied: sentry-sdk>=1.0.0 in /opt/conda/lib/python3.10/site-packages (from wandb) (2.15.0)\r\n",
      "Requirement already satisfied: setproctitle in /opt/conda/lib/python3.10/site-packages (from wandb) (1.3.3)\r\n",
      "Requirement already satisfied: setuptools in /opt/conda/lib/python3.10/site-packages (from wandb) (70.0.0)\r\n",
      "Requirement already satisfied: six>=1.4.0 in /opt/conda/lib/python3.10/site-packages (from docker-pycreds>=0.4.0->wandb) (1.16.0)\r\n",
      "Requirement already satisfied: gitdb<5,>=4.0.1 in /opt/conda/lib/python3.10/site-packages (from gitpython!=3.1.29,>=1.0.0->wandb) (4.0.11)\r\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.0.0->wandb) (3.3.2)\r\n",
      "Requirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.0.0->wandb) (3.7)\r\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.0.0->wandb) (1.26.18)\r\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.0.0->wandb) (2024.8.30)\r\n",
      "Requirement already satisfied: smmap<6,>=3.0.1 in /opt/conda/lib/python3.10/site-packages (from gitdb<5,>=4.0.1->gitpython!=3.1.29,>=1.0.0->wandb) (5.0.1)\r\n"
     ]
    }
   ],
   "source": [
    "!pip install wandb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "6ed3886c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-15T09:54:26.818638Z",
     "iopub.status.busy": "2024-10-15T09:54:26.817991Z",
     "iopub.status.idle": "2024-10-15T09:54:27.062105Z",
     "shell.execute_reply": "2024-10-15T09:54:27.061141Z"
    },
    "papermill": {
     "duration": 0.261214,
     "end_time": "2024-10-15T09:54:27.064619",
     "exception": false,
     "start_time": "2024-10-15T09:54:26.803405",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from kaggle_secrets import UserSecretsClient\n",
    "user_secrets = UserSecretsClient()\n",
    "secret_value_0 = user_secrets.get_secret(\"3d_wandb_key\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "91931044",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-15T09:54:27.094017Z",
     "iopub.status.busy": "2024-10-15T09:54:27.093025Z",
     "iopub.status.idle": "2024-10-15T09:54:28.591723Z",
     "shell.execute_reply": "2024-10-15T09:54:28.590863Z"
    },
    "papermill": {
     "duration": 1.515347,
     "end_time": "2024-10-15T09:54:28.593669",
     "exception": false,
     "start_time": "2024-10-15T09:54:27.078322",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[34m\u001b[1mwandb\u001b[0m: Using wandb-core as the SDK backend. Please refer to https://wandb.me/wandb-core for more information.\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: W&B API key is configured. Use \u001b[1m`wandb login --relogin`\u001b[0m to force relogin\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: \u001b[33mWARNING\u001b[0m If you're specifying your api key in code, ensure this code is not shared publicly.\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: \u001b[33mWARNING\u001b[0m Consider setting the WANDB_API_KEY environment variable, or running `wandb login` from the command line.\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Appending key for api.wandb.ai to your netrc file: /root/.netrc\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import wandb\n",
    "wandb.login(key=secret_value_0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "fe37e798",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-15T09:54:28.622805Z",
     "iopub.status.busy": "2024-10-15T09:54:28.622489Z",
     "iopub.status.idle": "2024-10-15T09:54:32.858249Z",
     "shell.execute_reply": "2024-10-15T09:54:32.857463Z"
    },
    "papermill": {
     "duration": 4.25298,
     "end_time": "2024-10-15T09:54:32.860617",
     "exception": false,
     "start_time": "2024-10-15T09:54:28.607637",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import sys\n",
    "from pathlib import Path\n",
    "\n",
    "# Add the 'data' directory to sys.path\n",
    "sys.path.append(str(Path('research-biocv-proj').resolve()))\n",
    "from data.unimodal3D import *\n",
    "from pathlib import Path\n",
    "\n",
    "import numpy as np\n",
    "import torch\n",
    "from torch.utils.data import DataLoader\n",
    "\n",
    "from sklearn.utils.class_weight import compute_class_weight"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a03e2c35",
   "metadata": {
    "papermill": {
     "duration": 0.01382,
     "end_time": "2024-10-15T09:54:32.889388",
     "exception": false,
     "start_time": "2024-10-15T09:54:32.875568",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Train ResNet model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "1eec3d16",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-15T09:54:32.918184Z",
     "iopub.status.busy": "2024-10-15T09:54:32.917682Z",
     "iopub.status.idle": "2024-10-15T09:54:32.928923Z",
     "shell.execute_reply": "2024-10-15T09:54:32.928226Z"
    },
    "papermill": {
     "duration": 0.027818,
     "end_time": "2024-10-15T09:54:32.930859",
     "exception": false,
     "start_time": "2024-10-15T09:54:32.903041",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class EarlyStopping:\n",
    "    \"\"\"Early stops the training if validation loss doesn't improve after a given patience.\"\"\"\n",
    "    def __init__(self, patience=7, verbose=False, delta=0, path='checkpoint.pt', trace_func=print):\n",
    "        \"\"\"\n",
    "        Args:\n",
    "            patience (int): How long to wait after last time validation loss improved.\n",
    "                            Default: 7\n",
    "            verbose (bool): If True, prints a message for each validation loss improvement. \n",
    "                            Default: False\n",
    "            delta (float): Minimum change in the monitored quantity to qualify as an improvement.\n",
    "                            Default: 0\n",
    "            path (str): Path for the checkpoint to be saved to.\n",
    "                            Default: 'checkpoint.pt'\n",
    "            trace_func (function): trace print function.\n",
    "                            Default: print            \n",
    "        \"\"\"\n",
    "        self.patience = patience\n",
    "        self.verbose = verbose\n",
    "        self.counter = 0\n",
    "        self.best_score = None\n",
    "        self.early_stop = False\n",
    "        self.val_loss_min = np.Inf\n",
    "        self.delta = delta\n",
    "        self.path = path\n",
    "        self.trace_func = trace_func\n",
    "    def __call__(self, val_loss, model):\n",
    "\n",
    "        score = -val_loss\n",
    "\n",
    "        if self.best_score is None:\n",
    "            self.best_score = score\n",
    "            self.save_checkpoint(val_loss, model)\n",
    "        elif score < self.best_score + self.delta:\n",
    "            self.counter += 1\n",
    "            self.trace_func(f'EarlyStopping counter: {self.counter} out of {self.patience}')\n",
    "            if self.counter >= self.patience:\n",
    "                self.early_stop = True\n",
    "        else:\n",
    "            self.best_score = score\n",
    "            self.save_checkpoint(val_loss, model)\n",
    "            self.counter = 0\n",
    "\n",
    "    def save_checkpoint(self, val_loss, model):\n",
    "        '''Saves model when validation loss decrease.'''\n",
    "        if self.verbose:\n",
    "            self.trace_func(f'Validation loss decreased ({self.val_loss_min:.6f} --> {val_loss:.6f}).  Saving model ...')\n",
    "        torch.save(model.state_dict(), self.path)\n",
    "        self.val_loss_min = val_loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "82071d3d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-15T09:54:32.959983Z",
     "iopub.status.busy": "2024-10-15T09:54:32.959669Z",
     "iopub.status.idle": "2024-10-15T09:54:32.984238Z",
     "shell.execute_reply": "2024-10-15T09:54:32.983547Z"
    },
    "papermill": {
     "duration": 0.041474,
     "end_time": "2024-10-15T09:54:32.986088",
     "exception": false,
     "start_time": "2024-10-15T09:54:32.944614",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def train(model,config, run_name=None):\n",
    "    wandb.init(\n",
    "        # set the wandb project where this run will be logged\n",
    "        project=\"3Dunimodal_ct_training\",\n",
    "        name = run_name,\n",
    "        # track hyperparameters and run metadata\n",
    "        config=config\n",
    "    )\n",
    "    optimizer = optim.Adam(model.parameters(), lr=config[\"learning_rate\"], weight_decay=config[\"weight_decay\"])\n",
    "    if config[\"class_weights\"] is not None: \n",
    "        config[\"class_weights\"] = torch.tensor(config[\"class_weights\"], dtype=torch.float).to(device)\n",
    "    \n",
    "    if config[\"focal_loss\"] is not None:\n",
    "        criterion = FocalLoss(gamma = config[\"focal_loss\"])\n",
    "    else:\n",
    "        criterion = nn.CrossEntropyLoss(weight = config[\"class_weights\"])\n",
    "    \n",
    "    scheduler = optim.lr_scheduler.ReduceLROnPlateau(optimizer, 'min',factor = config[\"reduce_lr_factor\"], patience = config[\"patience\"])\n",
    "    # initialize the early_stopping object\n",
    "    early_stopping = None\n",
    "    if config[\"early_stop_patience\"] is not None:\n",
    "        early_stopping = EarlyStopping(patience=config[\"early_stop_patience\"], verbose=True)\n",
    "    \n",
    "    # Training loop\n",
    "    num_epochs = config[\"epochs\"]\n",
    "    for epoch in range(num_epochs):\n",
    "        model.train()\n",
    "        running_loss = 0.0\n",
    "        train_correct = 0\n",
    "        total = 0\n",
    "        correct_per_class = [0, 0, 0]  # For G1, G2, G3\n",
    "        total_per_class = [0, 0, 0]  # For G1, G2, G3\n",
    "        for batch in train_loader:\n",
    "            volumes = batch['volume'].float().to(device)\n",
    "            labels = batch['label'].long().to(device)\n",
    "            #print(f\"volumes batch dimensions: {volumes.size()}\")\n",
    "            optimizer.zero_grad()\n",
    "            outputs = model(volumes.unsqueeze(1))\n",
    "            \n",
    "            if config[\"focal_loss\"]:\n",
    "                softmax = torch.nn.Softmax(dim=-1)\n",
    "                loss = criterion(softmax(outputs), labels)\n",
    "            else:\n",
    "                loss = criterion(outputs, labels)\n",
    "            \n",
    "            _, predicted = torch.max(outputs, 1)\n",
    "            train_correct += (predicted == labels).sum().item()\n",
    "            loss.backward()\n",
    "            optimizer.step()\n",
    "            total += labels.size(0)\n",
    "            running_loss += loss.item()\n",
    "            \n",
    "            # Calculate accuracy per class\n",
    "            for i in range(3):  # We have 3 classes: G1 (0), G2 (1), G3 (2)\n",
    "                correct_per_class[i] += ((predicted == i) & (labels == i)).sum().item()\n",
    "                total_per_class[i] += (labels == i).sum().item()\n",
    "            #if epoch % 100 == 0:\n",
    "                #for num,volume in enumerate(batch[\"volume\"]):\n",
    "                    #np.save(f\"batch{epoch}_vol{num}\",volume)\n",
    "\n",
    "        train_accuracy = 100 * train_correct / total\n",
    "        class_accuracy = [(100 * correct_per_class[i] / total_per_class[i]) if total_per_class[i] > 0 else 0 for i in range(3)]\n",
    "        print(f\"Epoch {epoch+1}, Loss: {running_loss/len(train_loader)}\")\n",
    "        wandb.log({\"Train Accuracy\": train_accuracy, \"Train loss\": running_loss/len(train_loader), \"G1_TrainAcc\":class_accuracy[0], \"G2_TrainAcc\":class_accuracy[1], \"G3_TrainAcc\":class_accuracy[2]})\n",
    "\n",
    "        # Validation loop\n",
    "        model.eval()\n",
    "        val_loss = 0.0\n",
    "        correct = 0\n",
    "        total = 0\n",
    "        # Initialize counters for each class (G1, G2, G3)\n",
    "        correct_per_class = [0, 0, 0]  # For G1, G2, G3\n",
    "        total_per_class = [0, 0, 0]  # For G1, G2, G3\n",
    "\n",
    "        with torch.no_grad():\n",
    "            for batch in val_loader:\n",
    "                volumes = batch['volume'].float().to(device)\n",
    "                labels = batch['label'].long().to(device)\n",
    "                \n",
    "                outputs = model(volumes.unsqueeze(1))\n",
    "                if config[\"focal_loss\"]:\n",
    "                    softmax = torch.nn.Softmax(dim=-1)\n",
    "                    loss = criterion(softmax(outputs), labels)\n",
    "                else:\n",
    "                    loss = criterion(outputs, labels)\n",
    "                \n",
    "                val_loss += loss.item()\n",
    "                _, predicted = torch.max(outputs, 1)\n",
    "                total += labels.size(0)\n",
    "                correct += (predicted == labels).sum().item()\n",
    "\n",
    "                # Calculate accuracy per class\n",
    "                for i in range(3):  # We have 3 classes: G1 (0), G2 (1), G3 (2)\n",
    "                    correct_per_class[i] += ((predicted == i) & (labels == i)).sum().item()\n",
    "                    total_per_class[i] += (labels == i).sum().item()\n",
    "                #if epoch % 100 == 0:\n",
    "                    #for num,volume in enumerate(batch[\"volume\"]):\n",
    "                       # np.save(f\"batch{epoch}_vol{num}_validation\",volume)\n",
    "        scheduler.step(val_loss)\n",
    "        # Compute total accuracy and per-class accuracy\n",
    "        total_accuracy = 100 * correct / total\n",
    "        class_accuracy = [(100 * correct_per_class[i] / total_per_class[i]) if total_per_class[i] > 0 else 0 for i in range(3)]\n",
    "        print(f\"Validation Loss: {val_loss/len(val_loader)}, Total Accuracy: {total_accuracy:.2f}%\")\n",
    "        print(f\"Accuracy per class - G1: {class_accuracy[0]:.2f}%, G2: {class_accuracy[1]:.2f}%, G3: {class_accuracy[2]:.2f}%\")\n",
    "        # log metrics to wandb\n",
    "        wandb.log({\"Total Accuracy\": total_accuracy, \"Validation Loss\": val_loss/len(val_loader), \"G1_Acc\":class_accuracy[0], \"G2_Acc\":class_accuracy[1], \"G3_Acc\":class_accuracy[2]})\n",
    "        if config[\"early_stop_patience\"] is not None:\n",
    "            early_stopping(val_loss, model)\n",
    "        \n",
    "        if config[\"early_stop_patience\"] is not None:\n",
    "            if early_stopping.early_stop:\n",
    "                print(\"Early stopping\")\n",
    "                break\n",
    "    wandb.finish()   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "4fbd9843",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-15T09:54:33.015123Z",
     "iopub.status.busy": "2024-10-15T09:54:33.014372Z",
     "iopub.status.idle": "2024-10-15T09:54:35.118519Z",
     "shell.execute_reply": "2024-10-15T09:54:35.117503Z"
    },
    "papermill": {
     "duration": 2.121933,
     "end_time": "2024-10-15T09:54:35.121714",
     "exception": false,
     "start_time": "2024-10-15T09:54:32.999781",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from transformers import ResNetForImageClassification"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "cc8994af",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-15T09:54:35.155259Z",
     "iopub.status.busy": "2024-10-15T09:54:35.154737Z",
     "iopub.status.idle": "2024-10-15T09:55:11.318671Z",
     "shell.execute_reply": "2024-10-15T09:55:11.317632Z"
    },
    "papermill": {
     "duration": 36.181479,
     "end_time": "2024-10-15T09:55:11.321089",
     "exception": false,
     "start_time": "2024-10-15T09:54:35.139610",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_dataset = UnimodalCTDataset3D(split='train',dataset_path = \"/kaggle/input/processed57patients3d/processed_3D_pad\" )\n",
    "val_dataset = UnimodalCTDataset3D(split='val',dataset_path = \"/kaggle/input/processed57patients3d/processed_3D_pad\")\n",
    "\n",
    "train_loader = DataLoader(train_dataset, batch_size=5, shuffle=True)\n",
    "val_loader = DataLoader(val_dataset, batch_size=2, shuffle=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "e038ba36",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-15T09:55:11.351512Z",
     "iopub.status.busy": "2024-10-15T09:55:11.351180Z",
     "iopub.status.idle": "2024-10-15T09:55:11.355983Z",
     "shell.execute_reply": "2024-10-15T09:55:11.355061Z"
    },
    "papermill": {
     "duration": 0.022169,
     "end_time": "2024-10-15T09:55:11.358086",
     "exception": false,
     "start_time": "2024-10-15T09:55:11.335917",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training set stats:{'length': 139, 'class_frequency': {'G1': 11, 'G2': 91, 'G3': 37}}\n",
      "Validation set stats:{'length': 18, 'class_frequency': {'G1': 4, 'G2': 8, 'G3': 6}}\n"
     ]
    }
   ],
   "source": [
    "print(f\"Training set stats:{train_dataset.stats()}\")\n",
    "print(f\"Validation set stats:{val_dataset.stats()}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "9859cb67",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-15T09:55:11.387627Z",
     "iopub.status.busy": "2024-10-15T09:55:11.387281Z",
     "iopub.status.idle": "2024-10-15T09:55:12.548403Z",
     "shell.execute_reply": "2024-10-15T09:55:12.547458Z"
    },
    "papermill": {
     "duration": 1.178939,
     "end_time": "2024-10-15T09:55:12.550890",
     "exception": false,
     "start_time": "2024-10-15T09:55:11.371951",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "labels = []\n",
    "for sample in train_dataset:\n",
    "    labels.append(sample[\"label\"])\n",
    "labels = np.array(labels)\n",
    "class_weights = compute_class_weight(\"balanced\", classes=np.unique(labels), y=labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "55f73f4f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-15T09:55:12.580663Z",
     "iopub.status.busy": "2024-10-15T09:55:12.579944Z",
     "iopub.status.idle": "2024-10-15T09:55:12.585005Z",
     "shell.execute_reply": "2024-10-15T09:55:12.584154Z"
    },
    "papermill": {
     "duration": 0.022013,
     "end_time": "2024-10-15T09:55:12.587025",
     "exception": false,
     "start_time": "2024-10-15T09:55:12.565012",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[4.21212121 0.50915751 1.25225225]\n"
     ]
    }
   ],
   "source": [
    "print(class_weights)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d59630e7",
   "metadata": {
    "papermill": {
     "duration": 0.013973,
     "end_time": "2024-10-15T09:55:12.615140",
     "exception": false,
     "start_time": "2024-10-15T09:55:12.601167",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 3D Resnet-18"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "eb468076",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-15T09:55:12.644195Z",
     "iopub.status.busy": "2024-10-15T09:55:12.643898Z",
     "iopub.status.idle": "2024-10-15T09:55:13.631784Z",
     "shell.execute_reply": "2024-10-15T09:55:13.631025Z"
    },
    "papermill": {
     "duration": 1.005005,
     "end_time": "2024-10-15T09:55:13.634011",
     "exception": false,
     "start_time": "2024-10-15T09:55:12.629006",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import torchvision.models as models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "68bcd93b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-15T09:55:13.663785Z",
     "iopub.status.busy": "2024-10-15T09:55:13.663463Z",
     "iopub.status.idle": "2024-10-15T09:55:13.670291Z",
     "shell.execute_reply": "2024-10-15T09:55:13.669274Z"
    },
    "papermill": {
     "duration": 0.023813,
     "end_time": "2024-10-15T09:55:13.672264",
     "exception": false,
     "start_time": "2024-10-15T09:55:13.648451",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class ResNet3D(nn.Module):\n",
    "    def __init__(self, num_classes):\n",
    "        super(ResNet3D, self).__init__()\n",
    "        self.model = models.video.r3d_18(pretrained=True)  # 3D ResNet18\n",
    "        self.model.stem[0] = nn.Conv3d(1, 64, kernel_size=(7, 7, 7), stride=(2, 2, 2), padding=(3, 3, 3), bias=False)\n",
    "        self.model.fc = nn.Linear(self.model.fc.in_features, num_classes)\n",
    "    \n",
    "    def forward(self, x):\n",
    "        return self.model(x)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b47f3fda",
   "metadata": {
    "papermill": {
     "duration": 0.013822,
     "end_time": "2024-10-15T09:55:13.700046",
     "exception": false,
     "start_time": "2024-10-15T09:55:13.686224",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## ResNet34-3D"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "48c4f130",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-15T09:55:13.729472Z",
     "iopub.status.busy": "2024-10-15T09:55:13.729190Z",
     "iopub.status.idle": "2024-10-15T09:55:13.766676Z",
     "shell.execute_reply": "2024-10-15T09:55:13.765940Z"
    },
    "papermill": {
     "duration": 0.054586,
     "end_time": "2024-10-15T09:55:13.768573",
     "exception": false,
     "start_time": "2024-10-15T09:55:13.713987",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import math\n",
    "from functools import partial\n",
    "\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "\n",
    "\n",
    "def get_inplanes():\n",
    "    return [64, 128, 256, 512]\n",
    "\n",
    "\n",
    "def conv3x3x3(in_planes, out_planes, stride=1):\n",
    "    return nn.Conv3d(in_planes,\n",
    "                     out_planes,\n",
    "                     kernel_size=3,\n",
    "                     stride=stride,\n",
    "                     padding=1,\n",
    "                     bias=False)\n",
    "\n",
    "\n",
    "def conv1x1x1(in_planes, out_planes, stride=1):\n",
    "    return nn.Conv3d(in_planes,\n",
    "                     out_planes,\n",
    "                     kernel_size=1,\n",
    "                     stride=stride,\n",
    "                     bias=False)\n",
    "\n",
    "\n",
    "class BasicBlock(nn.Module):\n",
    "    expansion = 1\n",
    "\n",
    "    def __init__(self, in_planes, planes, stride=1, downsample=None):\n",
    "        super().__init__()\n",
    "\n",
    "        self.conv1 = conv3x3x3(in_planes, planes, stride)\n",
    "        self.bn1 = nn.BatchNorm3d(planes)\n",
    "        self.relu = nn.ReLU(inplace=True)\n",
    "        self.conv2 = conv3x3x3(planes, planes)\n",
    "        self.bn2 = nn.BatchNorm3d(planes)\n",
    "        self.downsample = downsample\n",
    "        self.stride = stride\n",
    "\n",
    "    def forward(self, x):\n",
    "        residual = x\n",
    "\n",
    "        out = self.conv1(x)\n",
    "        out = self.bn1(out)\n",
    "        out = self.relu(out)\n",
    "\n",
    "        out = self.conv2(out)\n",
    "        out = self.bn2(out)\n",
    "\n",
    "        if self.downsample is not None:\n",
    "            residual = self.downsample(x)\n",
    "\n",
    "        out += residual\n",
    "        out = self.relu(out)\n",
    "\n",
    "        return out\n",
    "\n",
    "\n",
    "class Bottleneck(nn.Module):\n",
    "    expansion = 4\n",
    "\n",
    "    def __init__(self, in_planes, planes, stride=1, downsample=None):\n",
    "        super().__init__()\n",
    "\n",
    "        self.conv1 = conv1x1x1(in_planes, planes)\n",
    "        self.bn1 = nn.BatchNorm3d(planes)\n",
    "        self.conv2 = conv3x3x3(planes, planes, stride)\n",
    "        self.bn2 = nn.BatchNorm3d(planes)\n",
    "        self.conv3 = conv1x1x1(planes, planes * self.expansion)\n",
    "        self.bn3 = nn.BatchNorm3d(planes * self.expansion)\n",
    "        self.relu = nn.ReLU(inplace=True)\n",
    "        self.downsample = downsample\n",
    "        self.stride = stride\n",
    "\n",
    "    def forward(self, x):\n",
    "        residual = x\n",
    "\n",
    "        out = self.conv1(x)\n",
    "        out = self.bn1(out)\n",
    "        out = self.relu(out)\n",
    "\n",
    "        out = self.conv2(out)\n",
    "        out = self.bn2(out)\n",
    "        out = self.relu(out)\n",
    "\n",
    "        out = self.conv3(out)\n",
    "        out = self.bn3(out)\n",
    "\n",
    "        if self.downsample is not None:\n",
    "            residual = self.downsample(x)\n",
    "\n",
    "        out += residual\n",
    "        out = self.relu(out)\n",
    "\n",
    "        return out\n",
    "\n",
    "\n",
    "class ResNet(nn.Module):\n",
    "\n",
    "    def __init__(self,\n",
    "                 block,\n",
    "                 layers,\n",
    "                 block_inplanes,\n",
    "                 n_input_channels=3,\n",
    "                 conv1_t_size=7,\n",
    "                 conv1_t_stride=1,\n",
    "                 no_max_pool=False,\n",
    "                 shortcut_type='B',\n",
    "                 widen_factor=1.0,\n",
    "                 n_classes=400):\n",
    "        super().__init__()\n",
    "\n",
    "        block_inplanes = [int(x * widen_factor) for x in block_inplanes]\n",
    "\n",
    "        self.in_planes = block_inplanes[0]\n",
    "        self.no_max_pool = no_max_pool\n",
    "\n",
    "        self.conv1 = nn.Conv3d(n_input_channels,\n",
    "                               self.in_planes,\n",
    "                               kernel_size=(conv1_t_size, 7, 7),\n",
    "                               stride=(conv1_t_stride, 2, 2),\n",
    "                               padding=(conv1_t_size // 2, 3, 3),\n",
    "                               bias=False)\n",
    "        self.bn1 = nn.BatchNorm3d(self.in_planes)\n",
    "        self.relu = nn.ReLU(inplace=True)\n",
    "        self.maxpool = nn.MaxPool3d(kernel_size=3, stride=2, padding=1)\n",
    "        self.layer1 = self._make_layer(block, block_inplanes[0], layers[0],\n",
    "                                       shortcut_type)\n",
    "        self.layer2 = self._make_layer(block,\n",
    "                                       block_inplanes[1],\n",
    "                                       layers[1],\n",
    "                                       shortcut_type,\n",
    "                                       stride=2)\n",
    "        self.layer3 = self._make_layer(block,\n",
    "                                       block_inplanes[2],\n",
    "                                       layers[2],\n",
    "                                       shortcut_type,\n",
    "                                       stride=2)\n",
    "        self.layer4 = self._make_layer(block,\n",
    "                                       block_inplanes[3],\n",
    "                                       layers[3],\n",
    "                                       shortcut_type,\n",
    "                                       stride=2)\n",
    "\n",
    "        self.avgpool = nn.AdaptiveAvgPool3d((1, 1, 1))\n",
    "        self.fc = nn.Linear(block_inplanes[3] * block.expansion, n_classes)\n",
    "\n",
    "        for m in self.modules():\n",
    "            if isinstance(m, nn.Conv3d):\n",
    "                nn.init.kaiming_normal_(m.weight,\n",
    "                                        mode='fan_out',\n",
    "                                        nonlinearity='relu')\n",
    "            elif isinstance(m, nn.BatchNorm3d):\n",
    "                nn.init.constant_(m.weight, 1)\n",
    "                nn.init.constant_(m.bias, 0)\n",
    "\n",
    "    def _downsample_basic_block(self, x, planes, stride):\n",
    "        out = F.avg_pool3d(x, kernel_size=1, stride=stride)\n",
    "        zero_pads = torch.zeros(out.size(0), planes - out.size(1), out.size(2),\n",
    "                                out.size(3), out.size(4))\n",
    "        if isinstance(out.data, torch.cuda.FloatTensor):\n",
    "            zero_pads = zero_pads.cuda()\n",
    "\n",
    "        out = torch.cat([out.data, zero_pads], dim=1)\n",
    "\n",
    "        return out\n",
    "\n",
    "    def _make_layer(self, block, planes, blocks, shortcut_type, stride=1):\n",
    "        downsample = None\n",
    "        if stride != 1 or self.in_planes != planes * block.expansion:\n",
    "            if shortcut_type == 'A':\n",
    "                downsample = partial(self._downsample_basic_block,\n",
    "                                     planes=planes * block.expansion,\n",
    "                                     stride=stride)\n",
    "            else:\n",
    "                downsample = nn.Sequential(\n",
    "                    conv1x1x1(self.in_planes, planes * block.expansion, stride),\n",
    "                    nn.BatchNorm3d(planes * block.expansion))\n",
    "\n",
    "        layers = []\n",
    "        layers.append(\n",
    "            block(in_planes=self.in_planes,\n",
    "                  planes=planes,\n",
    "                  stride=stride,\n",
    "                  downsample=downsample))\n",
    "        self.in_planes = planes * block.expansion\n",
    "        for i in range(1, blocks):\n",
    "            layers.append(block(self.in_planes, planes))\n",
    "\n",
    "        return nn.Sequential(*layers)\n",
    "\n",
    "    def forward(self, x):\n",
    "        x = self.conv1(x)\n",
    "        x = self.bn1(x)\n",
    "        x = self.relu(x)\n",
    "        if not self.no_max_pool:\n",
    "            x = self.maxpool(x)\n",
    "\n",
    "        x = self.layer1(x)\n",
    "        x = self.layer2(x)\n",
    "        x = self.layer3(x)\n",
    "        x = self.layer4(x)\n",
    "\n",
    "        x = self.avgpool(x)\n",
    "\n",
    "        x = x.view(x.size(0), -1)\n",
    "        x = self.fc(x)\n",
    "\n",
    "        return x\n",
    "\n",
    "\n",
    "def generate_model(model_depth, **kwargs):\n",
    "    assert model_depth in [10, 18, 34, 50, 101, 152, 200]\n",
    "\n",
    "    if model_depth == 10:\n",
    "        model = ResNet(BasicBlock, [1, 1, 1, 1], get_inplanes(), **kwargs)\n",
    "    elif model_depth == 18:\n",
    "        model = ResNet(BasicBlock, [2, 2, 2, 2], get_inplanes(), **kwargs)\n",
    "    elif model_depth == 34:\n",
    "        model = ResNet(BasicBlock, [3, 4, 6, 3], get_inplanes(), **kwargs)\n",
    "    elif model_depth == 50:\n",
    "        model = ResNet(Bottleneck, [3, 4, 6, 3], get_inplanes(), **kwargs)\n",
    "    elif model_depth == 101:\n",
    "        model = ResNet(Bottleneck, [3, 4, 23, 3], get_inplanes(), **kwargs)\n",
    "    elif model_depth == 152:\n",
    "        model = ResNet(Bottleneck, [3, 8, 36, 3], get_inplanes(), **kwargs)\n",
    "    elif model_depth == 200:\n",
    "        model = ResNet(Bottleneck, [3, 24, 36, 3], get_inplanes(), **kwargs)\n",
    "\n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "2637867d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-15T09:55:13.797577Z",
     "iopub.status.busy": "2024-10-15T09:55:13.797279Z",
     "iopub.status.idle": "2024-10-15T09:55:13.800918Z",
     "shell.execute_reply": "2024-10-15T09:55:13.800116Z"
    },
    "papermill": {
     "duration": 0.020522,
     "end_time": "2024-10-15T09:55:13.802870",
     "exception": false,
     "start_time": "2024-10-15T09:55:13.782348",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#model = ResNet3D(num_classes = 3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "b87125a2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-15T09:55:13.831752Z",
     "iopub.status.busy": "2024-10-15T09:55:13.831467Z",
     "iopub.status.idle": "2024-10-15T09:55:14.907663Z",
     "shell.execute_reply": "2024-10-15T09:55:14.906844Z"
    },
    "papermill": {
     "duration": 1.093367,
     "end_time": "2024-10-15T09:55:14.910000",
     "exception": false,
     "start_time": "2024-10-15T09:55:13.816633",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model = generate_model(34, n_input_channels = 3, n_classes = 700)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "0e617beb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-15T09:55:14.939852Z",
     "iopub.status.busy": "2024-10-15T09:55:14.939514Z",
     "iopub.status.idle": "2024-10-15T09:56:42.687834Z",
     "shell.execute_reply": "2024-10-15T09:56:42.686620Z"
    },
    "papermill": {
     "duration": 87.765944,
     "end_time": "2024-10-15T09:56:42.690193",
     "exception": false,
     "start_time": "2024-10-15T09:55:14.924249",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Retrieving notices: ...working... done\r\n",
      "Channels:\r\n",
      " - rapidsai\r\n",
      " - nvidia\r\n",
      " - nodefaults\r\n",
      " - conda-forge\r\n",
      " - defaults\r\n",
      " - pytorch\r\n",
      "Platform: linux-64\r\n",
      "Collecting package metadata (repodata.json): \\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\bdone\r\n",
      "Solving environment: / \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\bdone\r\n",
      "\r\n",
      "## Package Plan ##\r\n",
      "\r\n",
      "  environment location: /opt/conda\r\n",
      "\r\n",
      "  added / updated specs:\r\n",
      "    - gdown\r\n",
      "\r\n",
      "\r\n",
      "The following packages will be downloaded:\r\n",
      "\r\n",
      "    package                    |            build\r\n",
      "    ---------------------------|-----------------\r\n",
      "    conda-24.9.1               |  py310hff52083_0         894 KB  conda-forge\r\n",
      "    filelock-3.16.1            |     pyhd8ed1ab_0          17 KB  conda-forge\r\n",
      "    gdown-5.2.0                |     pyhd8ed1ab_0          21 KB  conda-forge\r\n",
      "    ------------------------------------------------------------\r\n",
      "                                           Total:         932 KB\r\n",
      "\r\n",
      "The following NEW packages will be INSTALLED:\r\n",
      "\r\n",
      "  filelock           conda-forge/noarch::filelock-3.16.1-pyhd8ed1ab_0 \r\n",
      "  gdown              conda-forge/noarch::gdown-5.2.0-pyhd8ed1ab_0 \r\n",
      "\r\n",
      "The following packages will be UPDATED:\r\n",
      "\r\n",
      "  conda                              24.9.0-py310hff52083_0 --> 24.9.1-py310hff52083_0 \r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "Downloading and Extracting Packages:\r\n",
      "conda-24.9.1         | 894 KB    |                                       |   0% \r\n",
      "gdown-5.2.0          | 21 KB     |                                       |   0% \u001b[A\r\n",
      "\r\n",
      "conda-24.9.1         | 894 KB    | #########9                            |  27% \r\n",
      "\r\n",
      "filelock-3.16.1      | 17 KB     | ##################################### | 100% \u001b[A\u001b[A\r\n",
      "\r\n",
      "filelock-3.16.1      | 17 KB     | ##################################### | 100% \u001b[A\u001b[A\r\n",
      "gdown-5.2.0          | 21 KB     | ##################################### | 100% \u001b[A\r\n",
      "\r\n",
      "                                                                                \u001b[A\r\n",
      "\r\n",
      "\r\n",
      "Preparing transaction: - \b\bdone\r\n",
      "Verifying transaction: | \b\b/ \b\bdone\r\n",
      "Executing transaction: \\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\bdone\r\n"
     ]
    }
   ],
   "source": [
    "#Install package to load pretrained weights from google drive\n",
    "!conda install -y gdown"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "c0535e99",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-15T09:56:42.746819Z",
     "iopub.status.busy": "2024-10-15T09:56:42.745951Z",
     "iopub.status.idle": "2024-10-15T09:56:50.472263Z",
     "shell.execute_reply": "2024-10-15T09:56:50.471091Z"
    },
    "papermill": {
     "duration": 7.756995,
     "end_time": "2024-10-15T09:56:50.474445",
     "exception": false,
     "start_time": "2024-10-15T09:56:42.717450",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/gdown/__main__.py:140: FutureWarning: Option `--id` was deprecated in version 4.3.1 and will be removed in 5.0. You don't need to pass it anymore to use a file ID.\r\n",
      "  warnings.warn(\r\n",
      "Downloading...\r\n",
      "From (original): https://drive.google.com/uc?id=1fFN5J2He6eTqMPRl_M9gFtFfpUmhtQc9\r\n",
      "From (redirected): https://drive.google.com/uc?id=1fFN5J2He6eTqMPRl_M9gFtFfpUmhtQc9&confirm=t&uuid=9c37b927-f3b1-4867-b041-22a9bbc183b7\r\n",
      "To: /kaggle/working/r3d34_K_200ep.pth\r\n",
      "100%|█████████████████████████████████████████| 511M/511M [00:02<00:00, 189MB/s]\r\n"
     ]
    }
   ],
   "source": [
    "!gdown --id 1fFN5J2He6eTqMPRl_M9gFtFfpUmhtQc9"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "136ec3e5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-15T09:56:50.533445Z",
     "iopub.status.busy": "2024-10-15T09:56:50.533084Z",
     "iopub.status.idle": "2024-10-15T09:56:50.924430Z",
     "shell.execute_reply": "2024-10-15T09:56:50.923452Z"
    },
    "papermill": {
     "duration": 0.423539,
     "end_time": "2024-10-15T09:56:50.926949",
     "exception": false,
     "start_time": "2024-10-15T09:56:50.503410",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_23/2617428943.py:1: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n",
      "  pretrain = torch.load(\"/kaggle/working/r3d34_K_200ep.pth\", map_location='cpu')\n"
     ]
    }
   ],
   "source": [
    "pretrain = torch.load(\"/kaggle/working/r3d34_K_200ep.pth\", map_location='cpu')\n",
    "\n",
    "model.load_state_dict(pretrain['state_dict'])\n",
    "block_inplanes = get_inplanes()\n",
    "model.conv1 = nn.Conv3d(1,\n",
    "                        block_inplanes[0],\n",
    "                        kernel_size=(7, 7, 7),\n",
    "                        stride=(1, 2, 2),\n",
    "                        padding=(7 // 2, 3, 3),\n",
    "                        bias=False)\n",
    "model.conv1.weight = torch.nn.Parameter(pretrain['state_dict'][\"conv1.weight\"].mean(dim=1, keepdim=True))\n",
    "model.fc = nn.Linear(model.fc.in_features,3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "acf9b20d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-15T09:56:50.988623Z",
     "iopub.status.busy": "2024-10-15T09:56:50.988246Z",
     "iopub.status.idle": "2024-10-15T09:56:51.270475Z",
     "shell.execute_reply": "2024-10-15T09:56:51.269507Z"
    },
    "papermill": {
     "duration": 0.314329,
     "end_time": "2024-10-15T09:56:51.272427",
     "exception": false,
     "start_time": "2024-10-15T09:56:50.958098",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ResNet(\n",
       "  (conv1): Conv3d(1, 64, kernel_size=(7, 7, 7), stride=(1, 2, 2), padding=(3, 3, 3), bias=False)\n",
       "  (bn1): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "  (relu): ReLU(inplace=True)\n",
       "  (maxpool): MaxPool3d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n",
       "  (layer1): Sequential(\n",
       "    (0): BasicBlock(\n",
       "      (conv1): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n",
       "      (bn1): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      (relu): ReLU(inplace=True)\n",
       "      (conv2): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n",
       "      (bn2): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "    )\n",
       "    (1): BasicBlock(\n",
       "      (conv1): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n",
       "      (bn1): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      (relu): ReLU(inplace=True)\n",
       "      (conv2): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n",
       "      (bn2): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "    )\n",
       "    (2): BasicBlock(\n",
       "      (conv1): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n",
       "      (bn1): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      (relu): ReLU(inplace=True)\n",
       "      (conv2): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n",
       "      (bn2): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "    )\n",
       "  )\n",
       "  (layer2): Sequential(\n",
       "    (0): BasicBlock(\n",
       "      (conv1): Conv3d(64, 128, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), bias=False)\n",
       "      (bn1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      (relu): ReLU(inplace=True)\n",
       "      (conv2): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n",
       "      (bn2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      (downsample): Sequential(\n",
       "        (0): Conv3d(64, 128, kernel_size=(1, 1, 1), stride=(2, 2, 2), bias=False)\n",
       "        (1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      )\n",
       "    )\n",
       "    (1): BasicBlock(\n",
       "      (conv1): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n",
       "      (bn1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      (relu): ReLU(inplace=True)\n",
       "      (conv2): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n",
       "      (bn2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "    )\n",
       "    (2): BasicBlock(\n",
       "      (conv1): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n",
       "      (bn1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      (relu): ReLU(inplace=True)\n",
       "      (conv2): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n",
       "      (bn2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "    )\n",
       "    (3): BasicBlock(\n",
       "      (conv1): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n",
       "      (bn1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      (relu): ReLU(inplace=True)\n",
       "      (conv2): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n",
       "      (bn2): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "    )\n",
       "  )\n",
       "  (layer3): Sequential(\n",
       "    (0): BasicBlock(\n",
       "      (conv1): Conv3d(128, 256, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), bias=False)\n",
       "      (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      (relu): ReLU(inplace=True)\n",
       "      (conv2): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n",
       "      (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      (downsample): Sequential(\n",
       "        (0): Conv3d(128, 256, kernel_size=(1, 1, 1), stride=(2, 2, 2), bias=False)\n",
       "        (1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      )\n",
       "    )\n",
       "    (1): BasicBlock(\n",
       "      (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n",
       "      (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      (relu): ReLU(inplace=True)\n",
       "      (conv2): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n",
       "      (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "    )\n",
       "    (2): BasicBlock(\n",
       "      (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n",
       "      (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      (relu): ReLU(inplace=True)\n",
       "      (conv2): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n",
       "      (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "    )\n",
       "    (3): BasicBlock(\n",
       "      (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n",
       "      (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      (relu): ReLU(inplace=True)\n",
       "      (conv2): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n",
       "      (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "    )\n",
       "    (4): BasicBlock(\n",
       "      (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n",
       "      (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      (relu): ReLU(inplace=True)\n",
       "      (conv2): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n",
       "      (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "    )\n",
       "    (5): BasicBlock(\n",
       "      (conv1): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n",
       "      (bn1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      (relu): ReLU(inplace=True)\n",
       "      (conv2): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n",
       "      (bn2): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "    )\n",
       "  )\n",
       "  (layer4): Sequential(\n",
       "    (0): BasicBlock(\n",
       "      (conv1): Conv3d(256, 512, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), bias=False)\n",
       "      (bn1): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      (relu): ReLU(inplace=True)\n",
       "      (conv2): Conv3d(512, 512, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n",
       "      (bn2): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      (downsample): Sequential(\n",
       "        (0): Conv3d(256, 512, kernel_size=(1, 1, 1), stride=(2, 2, 2), bias=False)\n",
       "        (1): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      )\n",
       "    )\n",
       "    (1): BasicBlock(\n",
       "      (conv1): Conv3d(512, 512, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n",
       "      (bn1): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      (relu): ReLU(inplace=True)\n",
       "      (conv2): Conv3d(512, 512, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n",
       "      (bn2): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "    )\n",
       "    (2): BasicBlock(\n",
       "      (conv1): Conv3d(512, 512, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n",
       "      (bn1): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      (relu): ReLU(inplace=True)\n",
       "      (conv2): Conv3d(512, 512, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n",
       "      (bn2): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "    )\n",
       "  )\n",
       "  (avgpool): AdaptiveAvgPool3d(output_size=(1, 1, 1))\n",
       "  (fc): Linear(in_features=512, out_features=3, bias=True)\n",
       ")"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "model.to(device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "2d866aff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-15T09:56:51.340944Z",
     "iopub.status.busy": "2024-10-15T09:56:51.340485Z",
     "iopub.status.idle": "2024-10-15T09:57:03.113131Z",
     "shell.execute_reply": "2024-10-15T09:57:03.111936Z"
    },
    "papermill": {
     "duration": 11.810469,
     "end_time": "2024-10-15T09:57:03.115507",
     "exception": false,
     "start_time": "2024-10-15T09:56:51.305038",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting focal_loss_torch\r\n",
      "  Downloading focal_loss_torch-0.1.2-py3-none-any.whl.metadata (2.2 kB)\r\n",
      "Requirement already satisfied: torch in /opt/conda/lib/python3.10/site-packages (from focal_loss_torch) (2.4.0)\r\n",
      "Requirement already satisfied: numpy in /opt/conda/lib/python3.10/site-packages (from focal_loss_torch) (1.26.4)\r\n",
      "Requirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from torch->focal_loss_torch) (3.15.1)\r\n",
      "Requirement already satisfied: typing-extensions>=4.8.0 in /opt/conda/lib/python3.10/site-packages (from torch->focal_loss_torch) (4.12.2)\r\n",
      "Requirement already satisfied: sympy in /opt/conda/lib/python3.10/site-packages (from torch->focal_loss_torch) (1.13.3)\r\n",
      "Requirement already satisfied: networkx in /opt/conda/lib/python3.10/site-packages (from torch->focal_loss_torch) (3.3)\r\n",
      "Requirement already satisfied: jinja2 in /opt/conda/lib/python3.10/site-packages (from torch->focal_loss_torch) (3.1.4)\r\n",
      "Requirement already satisfied: fsspec in /opt/conda/lib/python3.10/site-packages (from torch->focal_loss_torch) (2024.6.1)\r\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in /opt/conda/lib/python3.10/site-packages (from jinja2->torch->focal_loss_torch) (2.1.5)\r\n",
      "Requirement already satisfied: mpmath<1.4,>=1.1.0 in /opt/conda/lib/python3.10/site-packages (from sympy->torch->focal_loss_torch) (1.3.0)\r\n",
      "Downloading focal_loss_torch-0.1.2-py3-none-any.whl (4.5 kB)\r\n",
      "Installing collected packages: focal_loss_torch\r\n",
      "Successfully installed focal_loss_torch-0.1.2\r\n"
     ]
    }
   ],
   "source": [
    "#https://github.com/mathiaszinnen/focal_loss_torch/tree/main\n",
    "!pip install focal_loss_torch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "31914aaa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-15T09:57:03.176474Z",
     "iopub.status.busy": "2024-10-15T09:57:03.176115Z",
     "iopub.status.idle": "2024-10-15T13:33:49.966712Z",
     "shell.execute_reply": "2024-10-15T13:33:49.965837Z"
    },
    "papermill": {
     "duration": 13006.823373,
     "end_time": "2024-10-15T13:33:49.968859",
     "exception": false,
     "start_time": "2024-10-15T09:57:03.145486",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mpietro-caforio\u001b[0m (\u001b[33mpietro-caforio-politecnico-di-milano\u001b[0m). Use \u001b[1m`wandb login --relogin`\u001b[0m to force relogin\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.18.3\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in \u001b[35m\u001b[1m/kaggle/working/wandb/run-20241015_095703-i1loyokz\u001b[0m\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Run \u001b[1m`wandb offline`\u001b[0m to turn off syncing.\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mResNet3D-34 FocalLoss pretrained\u001b[0m\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: ⭐️ View project at \u001b[34m\u001b[4mhttps://wandb.ai/pietro-caforio-politecnico-di-milano/3Dunimodal_ct_training\u001b[0m\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: 🚀 View run at \u001b[34m\u001b[4mhttps://wandb.ai/pietro-caforio-politecnico-di-milano/3Dunimodal_ct_training/runs/i1loyokz\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1, Loss: 0.31546637123184545\n",
      "Validation Loss: 0.6072516345367249, Total Accuracy: 44.44%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 0.00%\n",
      "Epoch 2, Loss: 0.3096066489815712\n",
      "Validation Loss: 0.5442263063612498, Total Accuracy: 44.44%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 0.00%\n",
      "Epoch 3, Loss: 0.29224073253239374\n",
      "Validation Loss: 0.5344431366667979, Total Accuracy: 44.44%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 0.00%\n",
      "Epoch 4, Loss: 0.29196722231738803\n",
      "Validation Loss: 0.5375478418492194, Total Accuracy: 44.44%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 0.00%\n",
      "Epoch 5, Loss: 0.2843934034463018\n",
      "Validation Loss: 0.5304212367110368, Total Accuracy: 44.44%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 0.00%\n",
      "Epoch 6, Loss: 0.27528513026689844\n",
      "Validation Loss: 0.5407228229127617, Total Accuracy: 44.44%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 0.00%\n",
      "Epoch 7, Loss: 0.2724418561805838\n",
      "Validation Loss: 0.5437872147627382, Total Accuracy: 44.44%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 0.00%\n",
      "Epoch 8, Loss: 0.2710912462290643\n",
      "Validation Loss: 0.5293278813155161, Total Accuracy: 44.44%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 0.00%\n",
      "Epoch 9, Loss: 0.2688452471380255\n",
      "Validation Loss: 0.5217593874678843, Total Accuracy: 44.44%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 0.00%\n",
      "Epoch 10, Loss: 0.2423702416708693\n",
      "Validation Loss: 0.5255302514932636, Total Accuracy: 44.44%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 0.00%\n",
      "Epoch 11, Loss: 0.25403398130687754\n",
      "Validation Loss: 0.5049654131030871, Total Accuracy: 44.44%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 0.00%\n",
      "Epoch 12, Loss: 0.24710230512677558\n",
      "Validation Loss: 0.5308866452218758, Total Accuracy: 44.44%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 0.00%\n",
      "Epoch 13, Loss: 0.24595558277464338\n",
      "Validation Loss: 0.5419693713128153, Total Accuracy: 44.44%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 0.00%\n",
      "Epoch 14, Loss: 0.22795416936943574\n",
      "Validation Loss: 0.505393226708596, Total Accuracy: 44.44%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 0.00%\n",
      "Epoch 15, Loss: 0.2342774872834395\n",
      "Validation Loss: 0.5307321298168972, Total Accuracy: 44.44%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 0.00%\n",
      "Epoch 16, Loss: 0.22654889894848956\n",
      "Validation Loss: 0.5312019577767286, Total Accuracy: 44.44%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 0.00%\n",
      "Epoch 17, Loss: 0.21798342537866638\n",
      "Validation Loss: 0.5292788220362531, Total Accuracy: 44.44%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 0.00%\n",
      "Epoch 18, Loss: 0.21490126332667256\n",
      "Validation Loss: 0.5196001425437216, Total Accuracy: 44.44%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 0.00%\n",
      "Epoch 19, Loss: 0.20819635694247804\n",
      "Validation Loss: 0.5244811604756655, Total Accuracy: 44.44%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 0.00%\n",
      "Epoch 20, Loss: 0.1965905998035201\n",
      "Validation Loss: 0.5200015304403173, Total Accuracy: 44.44%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 0.00%\n",
      "Epoch 21, Loss: 0.20362978125922382\n",
      "Validation Loss: 0.5245577902274413, Total Accuracy: 44.44%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 0.00%\n",
      "Epoch 22, Loss: 0.2002980873387839\n",
      "Validation Loss: 0.5224903174805351, Total Accuracy: 44.44%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 0.00%\n",
      "Epoch 23, Loss: 0.18878307838791183\n",
      "Validation Loss: 0.524505339938009, Total Accuracy: 44.44%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 0.00%\n",
      "Epoch 24, Loss: 0.19379223424143024\n",
      "Validation Loss: 0.4956848415054588, Total Accuracy: 44.44%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 0.00%\n",
      "Epoch 25, Loss: 0.18015999307057687\n",
      "Validation Loss: 0.5092855444333205, Total Accuracy: 44.44%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 0.00%\n",
      "Epoch 26, Loss: 0.17805020228427434\n",
      "Validation Loss: 0.49861735439238447, Total Accuracy: 44.44%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 0.00%\n",
      "Epoch 27, Loss: 0.1787177029265357\n",
      "Validation Loss: 0.49820126145560706, Total Accuracy: 44.44%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 0.00%\n",
      "Epoch 28, Loss: 0.16979296122943716\n",
      "Validation Loss: 0.5382064524326577, Total Accuracy: 44.44%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 0.00%\n",
      "Epoch 29, Loss: 0.1776659035988684\n",
      "Validation Loss: 0.5041458935916631, Total Accuracy: 44.44%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 0.00%\n",
      "Epoch 30, Loss: 0.16277497225174947\n",
      "Validation Loss: 0.5314473427262985, Total Accuracy: 44.44%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 0.00%\n",
      "Epoch 31, Loss: 0.1653664835861751\n",
      "Validation Loss: 0.4995015271835857, Total Accuracy: 44.44%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 0.00%\n",
      "Epoch 32, Loss: 0.15498194374543214\n",
      "Validation Loss: 0.49463103300270933, Total Accuracy: 44.44%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 0.00%\n",
      "Epoch 33, Loss: 0.15592927246221475\n",
      "Validation Loss: 0.49542045818331343, Total Accuracy: 44.44%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 0.00%\n",
      "Epoch 34, Loss: 0.16648818479318703\n",
      "Validation Loss: 0.5051730253164552, Total Accuracy: 44.44%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 0.00%\n",
      "Epoch 35, Loss: 0.16203800987984454\n",
      "Validation Loss: 0.49501056900610113, Total Accuracy: 44.44%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 0.00%\n",
      "Epoch 36, Loss: 0.15825028641016356\n",
      "Validation Loss: 0.49440179598362494, Total Accuracy: 44.44%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 0.00%\n",
      "Epoch 37, Loss: 0.1412551425330873\n",
      "Validation Loss: 0.5067500675536899, Total Accuracy: 44.44%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 0.00%\n",
      "Epoch 38, Loss: 0.14306906517595053\n",
      "Validation Loss: 0.5029091199523665, Total Accuracy: 44.44%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 0.00%\n",
      "Epoch 39, Loss: 0.14620114317429916\n",
      "Validation Loss: 0.5000307620373659, Total Accuracy: 44.44%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 0.00%\n",
      "Epoch 40, Loss: 0.14829475435960507\n",
      "Validation Loss: 0.4943035659703633, Total Accuracy: 44.44%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 0.00%\n",
      "Epoch 41, Loss: 0.14785671500223024\n",
      "Validation Loss: 0.47069206047389245, Total Accuracy: 44.44%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 0.00%\n",
      "Epoch 42, Loss: 0.13665368181786366\n",
      "Validation Loss: 0.4853745508331081, Total Accuracy: 44.44%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 0.00%\n",
      "Epoch 43, Loss: 0.127440709354622\n",
      "Validation Loss: 0.4630994502868917, Total Accuracy: 44.44%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 0.00%\n",
      "Epoch 44, Loss: 0.13763438990073545\n",
      "Validation Loss: 0.4850264595459319, Total Accuracy: 44.44%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 0.00%\n",
      "Epoch 45, Loss: 0.13376895507930645\n",
      "Validation Loss: 0.4899498591096037, Total Accuracy: 44.44%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 0.00%\n",
      "Epoch 46, Loss: 0.12862316096600676\n",
      "Validation Loss: 0.4994442784227431, Total Accuracy: 44.44%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 0.00%\n",
      "Epoch 47, Loss: 0.13204366737045348\n",
      "Validation Loss: 0.47658724603631225, Total Accuracy: 44.44%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 0.00%\n",
      "Epoch 48, Loss: 0.11925182724371552\n",
      "Validation Loss: 0.4915719411542846, Total Accuracy: 44.44%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 0.00%\n",
      "Epoch 49, Loss: 0.11371535192509848\n",
      "Validation Loss: 0.46364903637570226, Total Accuracy: 44.44%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 0.00%\n",
      "Epoch 50, Loss: 0.1170160744804889\n",
      "Validation Loss: 0.4896576471575018, Total Accuracy: 44.44%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 0.00%\n",
      "Epoch 51, Loss: 0.10886600610267903\n",
      "Validation Loss: 0.4643749073147774, Total Accuracy: 44.44%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 0.00%\n",
      "Epoch 52, Loss: 0.10153445461764932\n",
      "Validation Loss: 0.4671803120420211, Total Accuracy: 44.44%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 0.00%\n",
      "Epoch 53, Loss: 0.11542979837395251\n",
      "Validation Loss: 0.48120322920537245, Total Accuracy: 44.44%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 0.00%\n",
      "Epoch 54, Loss: 0.09054284758998879\n",
      "Validation Loss: 0.5033401084429998, Total Accuracy: 44.44%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 0.00%\n",
      "Epoch 55, Loss: 0.10292647742400211\n",
      "Validation Loss: 0.4880122237179118, Total Accuracy: 44.44%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 0.00%\n",
      "Epoch 56, Loss: 0.13555139053745993\n",
      "Validation Loss: 0.49473127963331837, Total Accuracy: 44.44%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 0.00%\n",
      "Epoch 57, Loss: 0.11038799869960972\n",
      "Validation Loss: 0.4760114135311192, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 16.67%\n",
      "Epoch 58, Loss: 0.10558598754661423\n",
      "Validation Loss: 0.4794471394400009, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 16.67%\n",
      "Epoch 59, Loss: 0.0847148616864745\n",
      "Validation Loss: 0.4814001830462884, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 16.67%\n",
      "Epoch 60, Loss: 0.10659574627477143\n",
      "Validation Loss: 0.48844504894481766, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 16.67%\n",
      "Epoch 61, Loss: 0.11179705243557692\n",
      "Validation Loss: 0.49578440071652746, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 16.67%\n",
      "Epoch 62, Loss: 0.09812737555642213\n",
      "Validation Loss: 0.4536219041587578, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 16.67%\n",
      "Epoch 63, Loss: 0.10871382087602147\n",
      "Validation Loss: 0.47712168431219953, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 16.67%\n",
      "Epoch 64, Loss: 0.10875109539899443\n",
      "Validation Loss: 0.4819315115132162, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 16.67%\n",
      "Epoch 65, Loss: 0.09601166691364986\n",
      "Validation Loss: 0.4715809037055199, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 16.67%\n",
      "Epoch 66, Loss: 0.084402417531237\n",
      "Validation Loss: 0.4797631181103902, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 16.67%\n",
      "Epoch 67, Loss: 0.11978719263736691\n",
      "Validation Loss: 0.47691446321550757, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 16.67%\n",
      "Epoch 68, Loss: 0.09514300614994552\n",
      "Validation Loss: 0.47162078527940643, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 16.67%\n",
      "Epoch 69, Loss: 0.0780489797970014\n",
      "Validation Loss: 0.4887155969433176, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 16.67%\n",
      "Epoch 70, Loss: 0.08673856174573302\n",
      "Validation Loss: 0.47896722761733046, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 16.67%\n",
      "Epoch 71, Loss: 0.08176383509167603\n",
      "Validation Loss: 0.5037013267348003, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 16.67%\n",
      "Epoch 72, Loss: 0.08845189030814384\n",
      "Validation Loss: 0.48360321941112894, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 16.67%\n",
      "Epoch 73, Loss: 0.07660737480702144\n",
      "Validation Loss: 0.47032470937766546, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 16.67%\n",
      "Epoch 74, Loss: 0.10385716506945235\n",
      "Validation Loss: 0.47249885596748853, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 16.67%\n",
      "Epoch 75, Loss: 0.07836497235777122\n",
      "Validation Loss: 0.4718453791897951, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 16.67%\n",
      "Epoch 76, Loss: 0.07798624807037413\n",
      "Validation Loss: 0.4684371893332961, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 16.67%\n",
      "Epoch 77, Loss: 0.07796701060474984\n",
      "Validation Loss: 0.4642644584657521, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 16.67%\n",
      "Epoch 78, Loss: 0.07301138378014523\n",
      "Validation Loss: 0.4833803598238673, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 16.67%\n",
      "Epoch 79, Loss: 0.06843180651776493\n",
      "Validation Loss: 0.4678643972147256, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 16.67%\n",
      "Epoch 80, Loss: 0.0878565875879888\n",
      "Validation Loss: 0.47702007972273147, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 16.67%\n",
      "Epoch 81, Loss: 0.06587360287085176\n",
      "Validation Loss: 0.46537154195700875, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 16.67%\n",
      "Epoch 82, Loss: 0.06947758737286287\n",
      "Validation Loss: 0.48719564885444316, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 16.67%\n",
      "Epoch 83, Loss: 0.08532038054961179\n",
      "Validation Loss: 0.498396484394713, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 16.67%\n",
      "Epoch 84, Loss: 0.06698431240926896\n",
      "Validation Loss: 0.46362608537957484, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 16.67%\n",
      "Epoch 85, Loss: 0.06550165192623224\n",
      "Validation Loss: 0.5040569830808737, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 16.67%\n",
      "Epoch 86, Loss: 0.06868542401519205\n",
      "Validation Loss: 0.48619882845863077, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 16.67%\n",
      "Epoch 87, Loss: 0.08213369890914432\n",
      "Validation Loss: 0.5260147790476266, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 16.67%\n",
      "Epoch 88, Loss: 0.05932619349498834\n",
      "Validation Loss: 0.4885038543531361, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 16.67%\n",
      "Epoch 89, Loss: 0.05622159503400326\n",
      "Validation Loss: 0.48683247450066525, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 16.67%\n",
      "Epoch 90, Loss: 0.05743914453445801\n",
      "Validation Loss: 0.48397494974132216, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 16.67%\n",
      "Epoch 91, Loss: 0.08359822065436415\n",
      "Validation Loss: 0.47339771112375373, Total Accuracy: 55.56%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 33.33%\n",
      "Epoch 92, Loss: 0.059197214897722006\n",
      "Validation Loss: 0.46048694010177216, Total Accuracy: 55.56%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 33.33%\n",
      "Epoch 93, Loss: 0.06763459436063256\n",
      "Validation Loss: 0.4882925787727193, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 16.67%\n",
      "Epoch 94, Loss: 0.05543229203405125\n",
      "Validation Loss: 0.4780346083118477, Total Accuracy: 55.56%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 33.33%\n",
      "Epoch 95, Loss: 0.07754115088443671\n",
      "Validation Loss: 0.49191914984516594, Total Accuracy: 55.56%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 33.33%\n",
      "Epoch 96, Loss: 0.04743730473066015\n",
      "Validation Loss: 0.46670770364451325, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 97, Loss: 0.04177693154529801\n",
      "Validation Loss: 0.484776357253496, Total Accuracy: 55.56%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 33.33%\n",
      "Epoch 98, Loss: 0.06005939924424248\n",
      "Validation Loss: 0.4894525801452498, Total Accuracy: 55.56%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 33.33%\n",
      "Epoch 99, Loss: 0.07281292831924345\n",
      "Validation Loss: 0.5162219432564193, Total Accuracy: 55.56%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 33.33%\n",
      "Epoch 100, Loss: 0.06387559633835085\n",
      "Validation Loss: 0.5096129841792086, Total Accuracy: 55.56%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 33.33%\n",
      "Epoch 101, Loss: 0.04534565647398787\n",
      "Validation Loss: 0.4983486681465163, Total Accuracy: 55.56%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 33.33%\n",
      "Epoch 102, Loss: 0.053307583023394854\n",
      "Validation Loss: 0.4760365324327722, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 103, Loss: 0.051459416979923844\n",
      "Validation Loss: 0.4773154537089997, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 104, Loss: 0.05068852240219712\n",
      "Validation Loss: 0.4714915543768762, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 105, Loss: 0.06961086535427187\n",
      "Validation Loss: 0.4764055137186208, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 106, Loss: 0.04579579843474286\n",
      "Validation Loss: 0.46168091690762797, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 107, Loss: 0.0519953643503998\n",
      "Validation Loss: 0.47835151149451527, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 108, Loss: 0.04405586597775774\n",
      "Validation Loss: 0.46415693649194306, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 109, Loss: 0.04900630239197718\n",
      "Validation Loss: 0.47321014701932046, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 110, Loss: 0.05337175811707441\n",
      "Validation Loss: 0.47766934894025326, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 111, Loss: 0.04703078029810318\n",
      "Validation Loss: 0.4860813231466131, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 112, Loss: 0.04622074715527041\n",
      "Validation Loss: 0.488282766186684, Total Accuracy: 55.56%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 33.33%\n",
      "Epoch 113, Loss: 0.06000646197104028\n",
      "Validation Loss: 0.49239401523825815, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 114, Loss: 0.04926494961338384\n",
      "Validation Loss: 0.48329224125740844, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 115, Loss: 0.05493778179931853\n",
      "Validation Loss: 0.4889782753566073, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 116, Loss: 0.0522466012210186\n",
      "Validation Loss: 0.48310692673678407, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 117, Loss: 0.05589170098703887\n",
      "Validation Loss: 0.47920696942472, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 118, Loss: 0.0595746201995228\n",
      "Validation Loss: 0.48193319220768494, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 119, Loss: 0.04307096837354558\n",
      "Validation Loss: 0.47077545477077365, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 120, Loss: 0.047613411277000396\n",
      "Validation Loss: 0.48509753135860795, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 121, Loss: 0.04827241153855409\n",
      "Validation Loss: 0.48847990224991616, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 122, Loss: 0.048276911789019196\n",
      "Validation Loss: 0.48810547618066064, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 123, Loss: 0.04445174991685365\n",
      "Validation Loss: 0.4969057475617673, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 124, Loss: 0.048994472167188566\n",
      "Validation Loss: 0.5132247696359021, Total Accuracy: 55.56%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 33.33%\n",
      "Epoch 125, Loss: 0.04196532699279487\n",
      "Validation Loss: 0.48487033103851396, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 126, Loss: 0.04128486967446016\n",
      "Validation Loss: 0.4849857184647893, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 127, Loss: 0.042847732780501246\n",
      "Validation Loss: 0.4937522329208959, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 128, Loss: 0.05270857543551496\n",
      "Validation Loss: 0.4920587205108152, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 129, Loss: 0.04616678073736174\n",
      "Validation Loss: 0.4770297687500715, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 130, Loss: 0.05264472735247442\n",
      "Validation Loss: 0.5187740488779835, Total Accuracy: 55.56%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 33.33%\n",
      "Epoch 131, Loss: 0.04793546175850289\n",
      "Validation Loss: 0.48333159727432456, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 132, Loss: 0.04559242640555437\n",
      "Validation Loss: 0.4830768585088663, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 133, Loss: 0.04766418006537216\n",
      "Validation Loss: 0.47938107565924937, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 134, Loss: 0.0616196917835623\n",
      "Validation Loss: 0.47802852879330104, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 135, Loss: 0.051712710776233246\n",
      "Validation Loss: 0.4736923160057308, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 136, Loss: 0.06084401539659926\n",
      "Validation Loss: 0.4576860846718773, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 137, Loss: 0.04901075141970068\n",
      "Validation Loss: 0.5210953350793311, Total Accuracy: 55.56%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 33.33%\n",
      "Epoch 138, Loss: 0.03582036473588752\n",
      "Validation Loss: 0.49960753271201, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 139, Loss: 0.04579729909476425\n",
      "Validation Loss: 0.5136120712332841, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 140, Loss: 0.03907119073638959\n",
      "Validation Loss: 0.4939634737739753, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 141, Loss: 0.06436829318824623\n",
      "Validation Loss: 0.5032742337013284, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 142, Loss: 0.05503323837183416\n",
      "Validation Loss: 0.5132207136872845, Total Accuracy: 55.56%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 33.33%\n",
      "Epoch 143, Loss: 0.05664424501758601\n",
      "Validation Loss: 0.4854597369946229, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 144, Loss: 0.05041486633542393\n",
      "Validation Loss: 0.481933463895176, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 145, Loss: 0.05626815218212349\n",
      "Validation Loss: 0.5185546546805805, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 146, Loss: 0.04647410351649991\n",
      "Validation Loss: 0.4916488380016138, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 147, Loss: 0.03822517627850175\n",
      "Validation Loss: 0.5105741804258691, Total Accuracy: 55.56%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 33.33%\n",
      "Epoch 148, Loss: 0.0381089918914118\n",
      "Validation Loss: 0.4971456512511294, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 149, Loss: 0.047169822750480046\n",
      "Validation Loss: 0.47864614818374523, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 150, Loss: 0.04404720589185932\n",
      "Validation Loss: 0.5026630936837237, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 151, Loss: 0.04672501011685069\n",
      "Validation Loss: 0.4856844491959136, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 152, Loss: 0.04585271751108978\n",
      "Validation Loss: 0.5133980340647718, Total Accuracy: 55.56%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 33.33%\n",
      "Epoch 153, Loss: 0.038291162877742736\n",
      "Validation Loss: 0.4937529345948456, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 154, Loss: 0.0629926695089255\n",
      "Validation Loss: 0.4997867297950304, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 155, Loss: 0.03796641941049269\n",
      "Validation Loss: 0.496300144011103, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 156, Loss: 0.04708372818173042\n",
      "Validation Loss: 0.4867153509338904, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 157, Loss: 0.04693733784370124\n",
      "Validation Loss: 0.4888940422549947, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 158, Loss: 0.05368792300578207\n",
      "Validation Loss: 0.5144211446264914, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 159, Loss: 0.04951381852983364\n",
      "Validation Loss: 0.4996506798068165, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 160, Loss: 0.0595902473931866\n",
      "Validation Loss: 0.4794774379244902, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 161, Loss: 0.041772113481004326\n",
      "Validation Loss: 0.47395239870658973, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 162, Loss: 0.06387764604629151\n",
      "Validation Loss: 0.4711847944676669, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 163, Loss: 0.057776200817897916\n",
      "Validation Loss: 0.4857373589701537, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 164, Loss: 0.04385436705446669\n",
      "Validation Loss: 0.513725451433048, Total Accuracy: 55.56%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 33.33%\n",
      "Epoch 165, Loss: 0.05271514949189233\n",
      "Validation Loss: 0.49135017484271276, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 166, Loss: 0.05653589905705303\n",
      "Validation Loss: 0.4957914201982526, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 167, Loss: 0.04614068155309984\n",
      "Validation Loss: 0.5260732103035681, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 168, Loss: 0.05254147617545511\n",
      "Validation Loss: 0.48801891504424727, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 169, Loss: 0.04255456861574203\n",
      "Validation Loss: 0.496507234502739, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 170, Loss: 0.03753707644396594\n",
      "Validation Loss: 0.5004036196559254, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 171, Loss: 0.04059338938843991\n",
      "Validation Loss: 0.5042871418764763, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 172, Loss: 0.051600829498576264\n",
      "Validation Loss: 0.5126026043047508, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 173, Loss: 0.04439342145009765\n",
      "Validation Loss: 0.49849848830167, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 174, Loss: 0.03955543553456664\n",
      "Validation Loss: 0.5102542022165532, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 175, Loss: 0.049637266235159974\n",
      "Validation Loss: 0.49066734697488656, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 176, Loss: 0.05093941235515688\n",
      "Validation Loss: 0.484695802274574, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 177, Loss: 0.0466073115323005\n",
      "Validation Loss: 0.5170228753607565, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 178, Loss: 0.03973306941666773\n",
      "Validation Loss: 0.5202930641632216, Total Accuracy: 55.56%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 33.33%\n",
      "Epoch 179, Loss: 0.05177165774096336\n",
      "Validation Loss: 0.5263776086438965, Total Accuracy: 55.56%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 33.33%\n",
      "Epoch 180, Loss: 0.05178877041076443\n",
      "Validation Loss: 0.518293183697905, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 181, Loss: 0.04394173708611301\n",
      "Validation Loss: 0.5066716794293219, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 182, Loss: 0.05135885030696435\n",
      "Validation Loss: 0.49648076243465766, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 183, Loss: 0.044837295510140915\n",
      "Validation Loss: 0.5132894817991959, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 184, Loss: 0.04564938305078873\n",
      "Validation Loss: 0.4822815175802033, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 185, Loss: 0.04861281705754144\n",
      "Validation Loss: 0.47574778413400054, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 186, Loss: 0.04444002794168357\n",
      "Validation Loss: 0.49551601997680134, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 187, Loss: 0.04217973743964519\n",
      "Validation Loss: 0.5074675779453375, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 188, Loss: 0.045597093096668165\n",
      "Validation Loss: 0.48856528114346376, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 189, Loss: 0.0488577723902251\n",
      "Validation Loss: 0.5063544946476921, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 190, Loss: 0.04150651947462133\n",
      "Validation Loss: 0.4948325319629576, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 191, Loss: 0.03203959814605436\n",
      "Validation Loss: 0.5210202955964228, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 192, Loss: 0.045774989861196706\n",
      "Validation Loss: 0.5043851928591417, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 193, Loss: 0.0734785065786647\n",
      "Validation Loss: 0.49021205597091466, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 194, Loss: 0.043953313758330684\n",
      "Validation Loss: 0.47113057952891624, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 195, Loss: 0.0419095402716526\n",
      "Validation Loss: 0.4921263358620409, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 196, Loss: 0.031664389152345915\n",
      "Validation Loss: 0.4787319440834431, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 197, Loss: 0.05356412603785949\n",
      "Validation Loss: 0.5280112754294856, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 198, Loss: 0.04109201517089137\n",
      "Validation Loss: 0.49622122654303286, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 199, Loss: 0.03948765031860343\n",
      "Validation Loss: 0.47163464264788973, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 200, Loss: 0.04512558478329863\n",
      "Validation Loss: 0.4638355166599568, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 201, Loss: 0.04859649110585451\n",
      "Validation Loss: 0.5009920689432571, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 202, Loss: 0.04285498967926417\n",
      "Validation Loss: 0.463564566258962, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 203, Loss: 0.04119114484637976\n",
      "Validation Loss: 0.47691704132335466, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 204, Loss: 0.058634082354339104\n",
      "Validation Loss: 0.4989262489252724, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 205, Loss: 0.03462142750088658\n",
      "Validation Loss: 0.47816476518184775, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 206, Loss: 0.06307798198291234\n",
      "Validation Loss: 0.4989419519746055, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 207, Loss: 0.05632724493209805\n",
      "Validation Loss: 0.5085696399781026, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 208, Loss: 0.05135705611402435\n",
      "Validation Loss: 0.49016231031338164, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 209, Loss: 0.053807829739525914\n",
      "Validation Loss: 0.5113415112266213, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 210, Loss: 0.04007785767316818\n",
      "Validation Loss: 0.5088417168137513, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 211, Loss: 0.04326445862118687\n",
      "Validation Loss: 0.5279194514086056, Total Accuracy: 55.56%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 33.33%\n",
      "Epoch 212, Loss: 0.03659251543493675\n",
      "Validation Loss: 0.5129842833751658, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 213, Loss: 0.038905645188476355\n",
      "Validation Loss: 0.5168236023002666, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 214, Loss: 0.04155429648900671\n",
      "Validation Loss: 0.4709563485941746, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 215, Loss: 0.04639252177107015\n",
      "Validation Loss: 0.4903434754620927, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 216, Loss: 0.06063180333668632\n",
      "Validation Loss: 0.49463948499437216, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 217, Loss: 0.044929845757516365\n",
      "Validation Loss: 0.5201294037138319, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 218, Loss: 0.04059728597556906\n",
      "Validation Loss: 0.4948560502056757, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 219, Loss: 0.04189336911908218\n",
      "Validation Loss: 0.4996267260543795, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 220, Loss: 0.03507627889380923\n",
      "Validation Loss: 0.5008005851802105, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 221, Loss: 0.03844215967027204\n",
      "Validation Loss: 0.533302941876981, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 222, Loss: 0.0479570781379672\n",
      "Validation Loss: 0.522987042324126, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 223, Loss: 0.04065926950092295\n",
      "Validation Loss: 0.49672640891124803, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 224, Loss: 0.04811636002601257\n",
      "Validation Loss: 0.4947961666750618, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 225, Loss: 0.04507130118353026\n",
      "Validation Loss: 0.5123663500028973, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 226, Loss: 0.04233406821731478\n",
      "Validation Loss: 0.46565235232830876, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 227, Loss: 0.04957193929502474\n",
      "Validation Loss: 0.5117586658776013, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 228, Loss: 0.03429557785524854\n",
      "Validation Loss: 0.5016164813552879, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 229, Loss: 0.05116785963764414\n",
      "Validation Loss: 0.49161764026050353, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 230, Loss: 0.060369740739198666\n",
      "Validation Loss: 0.4993086997160895, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 231, Loss: 0.03189482875833554\n",
      "Validation Loss: 0.49108617946815986, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 232, Loss: 0.04766633837217731\n",
      "Validation Loss: 0.4838729502387448, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 233, Loss: 0.06252476967139435\n",
      "Validation Loss: 0.48173749492788276, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 234, Loss: 0.0528834315482527\n",
      "Validation Loss: 0.4965528058496097, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 235, Loss: 0.0369141535900001\n",
      "Validation Loss: 0.509613642462581, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 236, Loss: 0.03852603697617139\n",
      "Validation Loss: 0.5039083599306954, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 237, Loss: 0.04290050617419183\n",
      "Validation Loss: 0.5244600124747699, Total Accuracy: 55.56%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 33.33%\n",
      "Epoch 238, Loss: 0.03596895735245198\n",
      "Validation Loss: 0.4820962979510013, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 239, Loss: 0.047088899450110536\n",
      "Validation Loss: 0.5092772556236014, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 240, Loss: 0.03566414051290069\n",
      "Validation Loss: 0.49530813217602876, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 241, Loss: 0.05625790101476014\n",
      "Validation Loss: 0.5121163472908342, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 242, Loss: 0.03785591507663152\n",
      "Validation Loss: 0.5089237692041529, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 243, Loss: 0.0348262915919934\n",
      "Validation Loss: 0.4984384683128964, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 244, Loss: 0.051288250334826965\n",
      "Validation Loss: 0.49381996526952004, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 245, Loss: 0.039575837835270376\n",
      "Validation Loss: 0.4667196150791521, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 246, Loss: 0.04948651186922299\n",
      "Validation Loss: 0.524374380892065, Total Accuracy: 55.56%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 33.33%\n",
      "Epoch 247, Loss: 0.046370058420247266\n",
      "Validation Loss: 0.508812014802566, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 248, Loss: 0.05775766004808247\n",
      "Validation Loss: 0.5177887688947117, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 249, Loss: 0.03879785507784358\n",
      "Validation Loss: 0.496118901459138, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 250, Loss: 0.048044565433104126\n",
      "Validation Loss: 0.4977888536846472, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 251, Loss: 0.04462478226715965\n",
      "Validation Loss: 0.4876770417063704, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 252, Loss: 0.05523178322307233\n",
      "Validation Loss: 0.49637522388042676, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 253, Loss: 0.033945847934644134\n",
      "Validation Loss: 0.4960923700709827, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 254, Loss: 0.04307766428350338\n",
      "Validation Loss: 0.5207054223121506, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 255, Loss: 0.027640287531539798\n",
      "Validation Loss: 0.49448337443431634, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 256, Loss: 0.039497294978770824\n",
      "Validation Loss: 0.5052144648248537, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 257, Loss: 0.038108999375253916\n",
      "Validation Loss: 0.5196591794600762, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 258, Loss: 0.03628291026689112\n",
      "Validation Loss: 0.49485560293800923, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 259, Loss: 0.037949732138908336\n",
      "Validation Loss: 0.5176141087140422, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 260, Loss: 0.04574906170767333\n",
      "Validation Loss: 0.4945939345246491, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 261, Loss: 0.032605040286268504\n",
      "Validation Loss: 0.49189328470836496, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 262, Loss: 0.04233831957182182\n",
      "Validation Loss: 0.49311559406083283, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 263, Loss: 0.032438115133637827\n",
      "Validation Loss: 0.5037145513278019, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 264, Loss: 0.041601609255719395\n",
      "Validation Loss: 0.5138347839820199, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 265, Loss: 0.033623211534826884\n",
      "Validation Loss: 0.4931647454052129, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 266, Loss: 0.035025566151099544\n",
      "Validation Loss: 0.49247665346289676, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 267, Loss: 0.04915726460915591\n",
      "Validation Loss: 0.5103174052912638, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 268, Loss: 0.04800723049057914\n",
      "Validation Loss: 0.5212154352759373, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 269, Loss: 0.04568035523074546\n",
      "Validation Loss: 0.48767638970295796, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 270, Loss: 0.06331291106263441\n",
      "Validation Loss: 0.48788451334176997, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 271, Loss: 0.04169039215360369\n",
      "Validation Loss: 0.5137631727654176, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 272, Loss: 0.04023872094694525\n",
      "Validation Loss: 0.4779002743307501, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 273, Loss: 0.04311256157234311\n",
      "Validation Loss: 0.5161106351620725, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 274, Loss: 0.04253674202066447\n",
      "Validation Loss: 0.5038696751257198, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 275, Loss: 0.051325935371486206\n",
      "Validation Loss: 0.47721453992805135, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 276, Loss: 0.04404945791299854\n",
      "Validation Loss: 0.5047573258440631, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 277, Loss: 0.04514153927032437\n",
      "Validation Loss: 0.4855537087811778, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 278, Loss: 0.039519472080948095\n",
      "Validation Loss: 0.47911556782977033, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 279, Loss: 0.04429470107425004\n",
      "Validation Loss: 0.5091207065011581, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 280, Loss: 0.03838504810950586\n",
      "Validation Loss: 0.47123269140461665, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 281, Loss: 0.05060594498978129\n",
      "Validation Loss: 0.49714788630889317, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 282, Loss: 0.03653235307761601\n",
      "Validation Loss: 0.5096443120306099, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 283, Loss: 0.06232395257601248\n",
      "Validation Loss: 0.49449258491060594, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 284, Loss: 0.03411970224364528\n",
      "Validation Loss: 0.4995906277650243, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 285, Loss: 0.04174521901378674\n",
      "Validation Loss: 0.5059347332183582, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 286, Loss: 0.04462558511711125\n",
      "Validation Loss: 0.49664971207837677, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 287, Loss: 0.03946977477919843\n",
      "Validation Loss: 0.5078912015693883, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 288, Loss: 0.04437414766289294\n",
      "Validation Loss: 0.4830734410530163, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 289, Loss: 0.032068373203011494\n",
      "Validation Loss: 0.4897486140382373, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 290, Loss: 0.03238747528355036\n",
      "Validation Loss: 0.48680402955505997, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 291, Loss: 0.03796899420142706\n",
      "Validation Loss: 0.5075339642806083, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 292, Loss: 0.030818400405613438\n",
      "Validation Loss: 0.5249281219827632, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 293, Loss: 0.03237032817144479\n",
      "Validation Loss: 0.5137427946319804, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 294, Loss: 0.03811083778938545\n",
      "Validation Loss: 0.49505244951514116, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 295, Loss: 0.04542301668386374\n",
      "Validation Loss: 0.4874756791525417, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 296, Loss: 0.02975492861254939\n",
      "Validation Loss: 0.4972861370899611, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 297, Loss: 0.04353588446974754\n",
      "Validation Loss: 0.5063727358614819, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 298, Loss: 0.040329411426292996\n",
      "Validation Loss: 0.5022279730829824, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 299, Loss: 0.0329708187075864\n",
      "Validation Loss: 0.5023947212353556, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 300, Loss: 0.0393195912641074\n",
      "Validation Loss: 0.4749329304451951, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 301, Loss: 0.03364457981660962\n",
      "Validation Loss: 0.4907495428342372, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 302, Loss: 0.04068801808170974\n",
      "Validation Loss: 0.4976649266641794, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 303, Loss: 0.0414229021740279\n",
      "Validation Loss: 0.5051704883226193, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 304, Loss: 0.03423352759065373\n",
      "Validation Loss: 0.4920366962970648, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 305, Loss: 0.028267746708089753\n",
      "Validation Loss: 0.5176068448215827, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 306, Loss: 0.030687213692414974\n",
      "Validation Loss: 0.5107180523078164, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 307, Loss: 0.03480856366721647\n",
      "Validation Loss: 0.4722042040537215, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 308, Loss: 0.03184372797009668\n",
      "Validation Loss: 0.4932810903216402, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 309, Loss: 0.03683238478177892\n",
      "Validation Loss: 0.503758452198882, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 310, Loss: 0.032137964120400805\n",
      "Validation Loss: 0.49932767987613463, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 311, Loss: 0.04002609870596124\n",
      "Validation Loss: 0.49847026932467187, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 312, Loss: 0.04245648952201009\n",
      "Validation Loss: 0.5312958316191927, Total Accuracy: 55.56%\n",
      "Accuracy per class - G1: 0.00%, G2: 100.00%, G3: 33.33%\n",
      "Epoch 313, Loss: 0.04273494352985706\n",
      "Validation Loss: 0.4998729658610601, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 314, Loss: 0.0387718870437571\n",
      "Validation Loss: 0.5025680856261816, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 315, Loss: 0.04117654568316149\n",
      "Validation Loss: 0.5050724240395034, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 316, Loss: 0.03438698001472013\n",
      "Validation Loss: 0.5245112192577734, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 317, Loss: 0.0473545448621735\n",
      "Validation Loss: 0.49064118506956017, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 318, Loss: 0.04733506264165044\n",
      "Validation Loss: 0.492770118962249, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 319, Loss: 0.0330246930409755\n",
      "Validation Loss: 0.48741292762699434, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 320, Loss: 0.04949383475884263\n",
      "Validation Loss: 0.5015811727110607, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 321, Loss: 0.02994833527398961\n",
      "Validation Loss: 0.4954589919846815, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 322, Loss: 0.030659965089788393\n",
      "Validation Loss: 0.506644307079518, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 323, Loss: 0.04803718490126942\n",
      "Validation Loss: 0.5004218301619403, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 324, Loss: 0.03379086381755769\n",
      "Validation Loss: 0.49905977689195424, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 325, Loss: 0.05365721372488354\n",
      "Validation Loss: 0.510853927653645, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 326, Loss: 0.02703365663598691\n",
      "Validation Loss: 0.5007764018373564, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 327, Loss: 0.036797747697814236\n",
      "Validation Loss: 0.4915823719929904, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 328, Loss: 0.03750538283825985\n",
      "Validation Loss: 0.4727962787470056, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 329, Loss: 0.03134378227072635\n",
      "Validation Loss: 0.5006158451950695, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 330, Loss: 0.04794085373370243\n",
      "Validation Loss: 0.4939910532945457, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 331, Loss: 0.028834795146914467\n",
      "Validation Loss: 0.48931584677969414, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 332, Loss: 0.03232684442108231\n",
      "Validation Loss: 0.5079219179913506, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 333, Loss: 0.05863502990853574\n",
      "Validation Loss: 0.5183518399587936, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 334, Loss: 0.06015182249913258\n",
      "Validation Loss: 0.4824447002546448, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 335, Loss: 0.0329807607091165\n",
      "Validation Loss: 0.509534172519731, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 336, Loss: 0.031245831716140465\n",
      "Validation Loss: 0.5023573308782134, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 337, Loss: 0.03284796653315425\n",
      "Validation Loss: 0.5046078239813343, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 338, Loss: 0.04196002462413162\n",
      "Validation Loss: 0.49773023049864507, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 339, Loss: 0.03735033352859318\n",
      "Validation Loss: 0.48463755553045, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 340, Loss: 0.046082727860526314\n",
      "Validation Loss: 0.4834184236436461, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 341, Loss: 0.04335125058423728\n",
      "Validation Loss: 0.5102981446220333, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 342, Loss: 0.035543718275481036\n",
      "Validation Loss: 0.47669315012171865, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 343, Loss: 0.02783732721582055\n",
      "Validation Loss: 0.48950995556596255, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 344, Loss: 0.029229183747832264\n",
      "Validation Loss: 0.4922404452550432, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 345, Loss: 0.03167559110027339\n",
      "Validation Loss: 0.4990370034938678, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 346, Loss: 0.04773345436634762\n",
      "Validation Loss: 0.5092033784668375, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 347, Loss: 0.03687969623466155\n",
      "Validation Loss: 0.48873347056926125, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 348, Loss: 0.045777187549642155\n",
      "Validation Loss: 0.4991225592740294, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 349, Loss: 0.03761010663583875\n",
      "Validation Loss: 0.4911890640699615, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 350, Loss: 0.0414918563494991\n",
      "Validation Loss: 0.49247347524700064, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 351, Loss: 0.04077953812001007\n",
      "Validation Loss: 0.512300924559693, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 352, Loss: 0.03428702488807695\n",
      "Validation Loss: 0.5050051527537612, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 353, Loss: 0.04404459521174431\n",
      "Validation Loss: 0.5206521377420157, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 354, Loss: 0.03620174701791257\n",
      "Validation Loss: 0.5160796284779079, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 355, Loss: 0.044269376600693376\n",
      "Validation Loss: 0.5130229019107193, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 356, Loss: 0.03858119260985404\n",
      "Validation Loss: 0.5122329812600381, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 357, Loss: 0.03179909393656999\n",
      "Validation Loss: 0.4960434193296048, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 358, Loss: 0.0351010750081124\n",
      "Validation Loss: 0.5002865176971277, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 359, Loss: 0.040701518450597565\n",
      "Validation Loss: 0.4918174244489314, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 360, Loss: 0.03850160229818097\n",
      "Validation Loss: 0.4968618342407151, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 361, Loss: 0.03608054850649621\n",
      "Validation Loss: 0.5075902772886265, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 362, Loss: 0.038204229603122385\n",
      "Validation Loss: 0.519581815593281, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 363, Loss: 0.03370622422413102\n",
      "Validation Loss: 0.48674768419004977, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 364, Loss: 0.03594581054390541\n",
      "Validation Loss: 0.49063235382911646, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 365, Loss: 0.03912864103248077\n",
      "Validation Loss: 0.509158911914306, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 366, Loss: 0.03754501776503665\n",
      "Validation Loss: 0.5241944378681688, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 367, Loss: 0.027400077486942922\n",
      "Validation Loss: 0.51481133837822, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 368, Loss: 0.031274884257332554\n",
      "Validation Loss: 0.49912668046696734, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 369, Loss: 0.03788811153000487\n",
      "Validation Loss: 0.5002485939767212, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 370, Loss: 0.03910438031224268\n",
      "Validation Loss: 0.5198976271721121, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 371, Loss: 0.03411582576310528\n",
      "Validation Loss: 0.5238163615253547, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 372, Loss: 0.0267157374182716\n",
      "Validation Loss: 0.5024077575589116, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 373, Loss: 0.050489114331347604\n",
      "Validation Loss: 0.5039523247784624, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 374, Loss: 0.031188985815138688\n",
      "Validation Loss: 0.5077507404332411, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 375, Loss: 0.033938382319839935\n",
      "Validation Loss: 0.4929408445540402, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 376, Loss: 0.032627121096343865\n",
      "Validation Loss: 0.48282827956912416, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 377, Loss: 0.04556069832428226\n",
      "Validation Loss: 0.4926339011484136, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 378, Loss: 0.05101754855630653\n",
      "Validation Loss: 0.5158910622251116, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 379, Loss: 0.031623987963290086\n",
      "Validation Loss: 0.4996967443730682, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 380, Loss: 0.04427282846466239\n",
      "Validation Loss: 0.49578542996379027, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 381, Loss: 0.043006479440789135\n",
      "Validation Loss: 0.5165799196887141, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 382, Loss: 0.030016524700580964\n",
      "Validation Loss: 0.5083476616095545, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 383, Loss: 0.031017963574933156\n",
      "Validation Loss: 0.48298212153733605, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 384, Loss: 0.04021156429579215\n",
      "Validation Loss: 0.5015692364476207, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 385, Loss: 0.035925035448079665\n",
      "Validation Loss: 0.5147292833684737, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 386, Loss: 0.034634517139888236\n",
      "Validation Loss: 0.48202296127823907, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 387, Loss: 0.03065008415640997\n",
      "Validation Loss: 0.4797975674866595, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 388, Loss: 0.032596566315208166\n",
      "Validation Loss: 0.5031864186684187, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 389, Loss: 0.039932817220687866\n",
      "Validation Loss: 0.519491663959343, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 390, Loss: 0.03943960350339434\n",
      "Validation Loss: 0.5129405488777492, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 391, Loss: 0.026398361577386304\n",
      "Validation Loss: 0.4800137953781005, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 392, Loss: 0.03853712704897459\n",
      "Validation Loss: 0.46963547011061263, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 393, Loss: 0.04738399787207267\n",
      "Validation Loss: 0.5055153230140503, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 394, Loss: 0.04386280082897948\n",
      "Validation Loss: 0.5001100751687773, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 395, Loss: 0.04112983139098755\n",
      "Validation Loss: 0.5319964785562156, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 396, Loss: 0.03410003853163549\n",
      "Validation Loss: 0.5055794779392373, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 397, Loss: 0.029817817832476327\n",
      "Validation Loss: 0.5096765608371546, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 398, Loss: 0.034502798857699545\n",
      "Validation Loss: 0.5145678289894325, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 399, Loss: 0.042871565491493256\n",
      "Validation Loss: 0.49761236285040567, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n",
      "Epoch 400, Loss: 0.031126427963109955\n",
      "Validation Loss: 0.502479758055415, Total Accuracy: 50.00%\n",
      "Accuracy per class - G1: 0.00%, G2: 87.50%, G3: 33.33%\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:          G1_Acc ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:     G1_TrainAcc ▁▁▁▁▁▂▂▄▅▅▇▅▇▅▆▆▅▅▇▆▇▆▄▅▇▇█▆▇▇▆▄▇█▇▇▇█▇▇\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:          G2_Acc ████████▁▁█▁▁▁█▁█▁▁▁█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:     G2_TrainAcc ███████████▄▄▄▁▄▁▄▄▄▄█▄▁█▄▄▁█▄▄▄▄▄▄▄▄▄█▄\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:          G3_Acc ▁▁▁▁▁▅▅▅▅▅▅▅▅███████████████████████████\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:     G3_TrainAcc ▁▁▁▁▁▁▁▄▄▄▄▆▅▇▇▆▅▅▇▇▆▆▇▆▇▇██▇▆▇▆▇▇█▇▇█▆▇\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:  Total Accuracy ▁▁▁▁▅▅▅▅█▅█▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅█▅▅▅▅▅▅▅▅\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:  Train Accuracy ▁▁▁▁▁▁▂▂▃▄▄▅▆▅▅▆▆▅▆▆▇▆▆▆▆▇▅█▇▆▇█▇▇▇▇▇█▆▇\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:      Train loss █▅▅▅▅▄▄▃▂▂▂▂▂▂▂▂▂▂▁▁▁▁▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Validation Loss █▇▅▇▆▆▄▁▃▂▃▂▃▄▄▃▃▄▃▆▄▃▅▄▆▅▆▄▄▃▄▅▅▆▄▆▆▄▃▆\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:          G1_Acc 0\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:     G1_TrainAcc 72.72727\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:          G2_Acc 87.5\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:     G2_TrainAcc 97.8022\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:          G3_Acc 33.33333\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:     G3_TrainAcc 81.08108\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:  Total Accuracy 50\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:  Train Accuracy 91.36691\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:      Train loss 0.03113\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Validation Loss 0.50248\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: 🚀 View run \u001b[33mResNet3D-34 FocalLoss pretrained\u001b[0m at: \u001b[34m\u001b[4mhttps://wandb.ai/pietro-caforio-politecnico-di-milano/3Dunimodal_ct_training/runs/i1loyokz\u001b[0m\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: ⭐️ View project at: \u001b[34m\u001b[4mhttps://wandb.ai/pietro-caforio-politecnico-di-milano/3Dunimodal_ct_training\u001b[0m\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 0 other file(s)\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Find logs at: \u001b[35m\u001b[1m./wandb/run-20241015_095703-i1loyokz/logs\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "from focal_loss.focal_loss import FocalLoss\n",
    "config={\n",
    "    \"learning_rate\": 1e-7,\n",
    "    \"architecture\": \"ResNet3D-34 FocalLoss pretrained\",\n",
    "    \"epochs\": 400,\n",
    "    \"weight_decay\": 1e-5,\n",
    "    \"reduce_lr_factor\": 0.25,\n",
    "    \"patience\": 40,\n",
    "    \"class_weights\": None,\n",
    "    \"early_stop_patience\": None,\n",
    "    \"focal_loss\": 4\n",
    "    }\n",
    "train(model, config, run_name = config[\"architecture\"])"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 5664308,
     "sourceId": 9547833,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 5863281,
     "sourceId": 9609374,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30787,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 13184.992227,
   "end_time": "2024-10-15T13:33:51.889037",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-10-15T09:54:06.896810",
   "version": "2.6.0"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "0f74e50d11824c589594423e545fb4fd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "143ad20d35434be89f39cdac70e0081d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "148dbfbb28564c9392b3e506f8ad78d6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_6a4a435278744922ba00185fa0628e06",
        "IPY_MODEL_a290bba08f9542f9bf35798535d390d9",
        "IPY_MODEL_4dc614faa4bd4cf9a688353619da2b0e"
       ],
       "layout": "IPY_MODEL_655f98d76beb4cfdbd790f0620af4fce"
      }
     },
     "19c4b812c58d4ab6bc3cd5d7bea9fdf8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "4dc614faa4bd4cf9a688353619da2b0e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_19c4b812c58d4ab6bc3cd5d7bea9fdf8",
       "placeholder": "​",
       "style": "IPY_MODEL_b13021f1f89f4786a7353648fc1a5884",
       "value": " 46.8M/46.8M [00:03&lt;00:00, 15.1MB/s]"
      }
     },
     "5aabee46e73c4e1e949fe611f697add0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "5e578b3fcc5c437791b41c60ead2f373": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6213dd8318994913b79d296acfb123b7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_5e578b3fcc5c437791b41c60ead2f373",
       "max": 69548,
       "min": 0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_5aabee46e73c4e1e949fe611f697add0",
       "value": 69548
      }
     },
     "62de300bb21143b68602e94c74e3f39b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "655f98d76beb4cfdbd790f0620af4fce": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6a4a435278744922ba00185fa0628e06": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_f1e9deee886e441990c8086b244101b2",
       "placeholder": "​",
       "style": "IPY_MODEL_143ad20d35434be89f39cdac70e0081d",
       "value": "model.safetensors: 100%"
      }
     },
     "70c0081ec8cf4159b2cd1184eae53b5d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7dd733ad658b48359feb02f8c0436c62": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7f4be5cd22f64a6ebf8629388d9fe314": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_f98e6a28a77b460aa5b9c367684afbf6",
        "IPY_MODEL_6213dd8318994913b79d296acfb123b7",
        "IPY_MODEL_97a6dfab7007407cac133d69ba3394c0"
       ],
       "layout": "IPY_MODEL_7fe107f7ec564556bbd41a700510e787"
      }
     },
     "7fe107f7ec564556bbd41a700510e787": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8c90ff6ae7f44ed1a6a8496e9269d845": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "97a6dfab7007407cac133d69ba3394c0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_70c0081ec8cf4159b2cd1184eae53b5d",
       "placeholder": "​",
       "style": "IPY_MODEL_e7c6b1c1c6304d2ca4e35472b1f690b4",
       "value": " 69.5k/69.5k [00:00&lt;00:00, 326kB/s]"
      }
     },
     "a290bba08f9542f9bf35798535d390d9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_7dd733ad658b48359feb02f8c0436c62",
       "max": 46812324,
       "min": 0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_8c90ff6ae7f44ed1a6a8496e9269d845",
       "value": 46812324
      }
     },
     "b13021f1f89f4786a7353648fc1a5884": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "e7c6b1c1c6304d2ca4e35472b1f690b4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "f1e9deee886e441990c8086b244101b2": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f98e6a28a77b460aa5b9c367684afbf6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_62de300bb21143b68602e94c74e3f39b",
       "placeholder": "​",
       "style": "IPY_MODEL_0f74e50d11824c589594423e545fb4fd",
       "value": "config.json: 100%"
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
